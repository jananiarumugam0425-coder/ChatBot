{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Login\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000'; // Define base URL\n\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  // State for login/signup credentials\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  // State for additional sign-up fields\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n\n  // UI State\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [isResetFlow, setIsResetFlow] = useState(false);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // NEW: Clears fields when component mounts or authentication mode changes\n  useEffect(() => {\n    setUsername('');\n    setPassword('');\n    setEmail('');\n    setError('');\n    setSuccessMessage('');\n  }, [isSignUp, isResetFlow]); // Re-run when switching between Log In, Sign Up, or Reset Flow\n\n  // Helper to determine CSS class for messages\n  const getMessageClass = () => {\n    if (error) return 'login-error';\n    if (successMessage) return 'login-success';\n    return '';\n  };\n  const handleAuth = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\n    const body = isSignUp ? JSON.stringify({\n      username,\n      password,\n      full_name: fullName,\n      email\n    }) : JSON.stringify({\n      username,\n      password\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        // Clear password on error for security\n        setPassword('');\n        throw new Error(data.error || 'Authentication failed.');\n      }\n      if (data.token) {\n        onLogin(data.token, username);\n      } else {\n        setSuccessMessage(data.message || 'Account created successfully! Please log in.');\n        setIsSignUp(false);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const handlePasswordReset = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    if (!email.trim()) {\n      setError(\"Please enter your email address to reset your password.\");\n      return;\n    }\n\n    // --- Mocked API Call for Prototype ---\n    setTimeout(() => {\n      setSuccessMessage(\"If an account exists for that email, a password reset link has been sent.\");\n      setIsResetFlow(false); // Automatically return to login form\n    }, 1500);\n\n    // --- End Mocked API Call ---\n  };\n  const handleToggleAuth = () => {\n    setIsSignUp(prev => !prev);\n    setIsResetFlow(false);\n  };\n  const handleOpenResetFlow = () => {\n    setIsResetFlow(true);\n  };\n  const handleBackToLogin = () => {\n    setIsResetFlow(false);\n  };\n\n  // Determine the action handler based on the flow\n  const formHandler = isResetFlow ? handlePasswordReset : handleAuth;\n\n  // --- Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"login-title\",\n        children: isResetFlow ? 'Reset Password' : isSignUp ? 'Sign Up' : 'Log In'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formHandler,\n        className: \"login-form\",\n        children: [(isSignUp || isResetFlow) && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: isResetFlow ? \"Enter your email address\" : \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 26\n        }, this), isSignUp && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Full Name\",\n          value: fullName,\n          onChange: e => setFullName(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 26\n        }, this), !isResetFlow && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Username\",\n            value: username,\n            onChange: e => setUsername(e.target.value),\n            className: \"login-input\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            value: password,\n            onChange: e => setPassword(e.target.value),\n            className: \"login-input\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), !isSignUp && !isResetFlow && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleOpenResetFlow,\n          className: \"forgot-password-button\",\n          children: \"Forgot Password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 26\n        }, this), (error || successMessage) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: getMessageClass(),\n          children: error || successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          disabled: isResetFlow ? !email.trim() : !username.trim() || !password.trim() || isSignUp && (!fullName.trim() || !email.trim()),\n          children: isResetFlow ? 'Send Reset Link' : isSignUp ? 'Sign Up' : 'Log In'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleAuth,\n        className: \"toggle-auth-button\",\n        children: isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), isResetFlow && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToLogin,\n        className: \"toggle-auth-button\",\n        children: \"Back to Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"tXaE0B2fafkOFWXBF943B7LyCEY=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","Login","onLogin","_s","username","setUsername","password","setPassword","fullName","setFullName","email","setEmail","isSignUp","setIsSignUp","isResetFlow","setIsResetFlow","error","setError","successMessage","setSuccessMessage","getMessageClass","handleAuth","e","preventDefault","url","body","JSON","stringify","full_name","response","fetch","method","headers","data","json","ok","Error","token","message","err","handlePasswordReset","trim","setTimeout","handleToggleAuth","prev","handleOpenResetFlow","handleBackToLogin","formHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Login/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Login.css';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000'; // Define base URL\r\n\r\nconst Login = ({ onLogin }) => {\r\n    // State for login/signup credentials\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    // State for additional sign-up fields\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    \r\n    // UI State\r\n    const [isSignUp, setIsSignUp] = useState(false);\r\n    const [isResetFlow, setIsResetFlow] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    // NEW: Clears fields when component mounts or authentication mode changes\r\n    useEffect(() => {\r\n        setUsername('');\r\n        setPassword('');\r\n        setEmail('');\r\n        setError('');\r\n        setSuccessMessage('');\r\n    }, [isSignUp, isResetFlow]); // Re-run when switching between Log In, Sign Up, or Reset Flow\r\n\r\n    // Helper to determine CSS class for messages\r\n    const getMessageClass = () => {\r\n        if (error) return 'login-error';\r\n        if (successMessage) return 'login-success';\r\n        return '';\r\n    };\r\n\r\n    const handleAuth = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n        \r\n        const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\r\n\r\n        const body = isSignUp \r\n            ? JSON.stringify({ username, password, full_name: fullName, email }) \r\n            : JSON.stringify({ username, password });\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: body,\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                // Clear password on error for security\r\n                setPassword('');\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            if (data.token) {\r\n                onLogin(data.token, username);\r\n            } else {\r\n                setSuccessMessage(data.message || 'Account created successfully! Please log in.');\r\n                setIsSignUp(false);\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    \r\n    const handlePasswordReset = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n\r\n        if (!email.trim()) {\r\n            setError(\"Please enter your email address to reset your password.\");\r\n            return;\r\n        }\r\n\r\n        // --- Mocked API Call for Prototype ---\r\n        setTimeout(() => {\r\n            setSuccessMessage(\"If an account exists for that email, a password reset link has been sent.\");\r\n            setIsResetFlow(false); // Automatically return to login form\r\n        }, 1500);\r\n        \r\n        // --- End Mocked API Call ---\r\n    };\r\n\r\n    const handleToggleAuth = () => {\r\n        setIsSignUp(prev => !prev);\r\n        setIsResetFlow(false); \r\n    };\r\n    \r\n    const handleOpenResetFlow = () => {\r\n        setIsResetFlow(true);\r\n    };\r\n\r\n    const handleBackToLogin = () => {\r\n        setIsResetFlow(false);\r\n    };\r\n\r\n    // Determine the action handler based on the flow\r\n    const formHandler = isResetFlow ? handlePasswordReset : handleAuth;\r\n    \r\n    // --- Render ---\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-card\">\r\n                <h1 className=\"login-title\">\r\n                    {isResetFlow ? 'Reset Password' : (isSignUp ? 'Sign Up' : 'Log In')}\r\n                </h1>\r\n\r\n                <form onSubmit={formHandler} className=\"login-form\">\r\n                    \r\n                    {/* Email Input (used in Sign Up and Reset Flow) */}\r\n                    {(isSignUp || isResetFlow) && (\r\n                         <input\r\n                            type=\"email\"\r\n                            placeholder={isResetFlow ? \"Enter your email address\" : \"Email\"}\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            className=\"login-input\"\r\n                            required\r\n                         />\r\n                    )}\r\n\r\n                    {/* Full Name (Sign Up only) */}\r\n                    {isSignUp && (\r\n                         <input\r\n                            type=\"text\"\r\n                            placeholder=\"Full Name\"\r\n                            value={fullName}\r\n                            onChange={(e) => setFullName(e.target.value)}\r\n                            className=\"login-input\"\r\n                            required\r\n                         />\r\n                    )}\r\n                    \r\n                    {/* Username and Password (Auth Flow only) */}\r\n                    {!isResetFlow && (\r\n                        <>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Username\"\r\n                                value={username}\r\n                                onChange={(e) => setUsername(e.target.value)}\r\n                                className=\"login-input\"\r\n                                required\r\n                            />\r\n                            <input\r\n                                type=\"password\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                onChange={(e) => setPassword(e.target.value)}\r\n                                className=\"login-input\"\r\n                                required\r\n                            />\r\n                        </>\r\n                    )}\r\n                    \r\n                    {/* --- Forgot Password Button (Visible only on Login view) --- */}\r\n                    {!isSignUp && !isResetFlow && (\r\n                         <button type=\"button\" onClick={handleOpenResetFlow} className=\"forgot-password-button\">\r\n                            Forgot Password?\r\n                         </button>\r\n                    )}\r\n                    \r\n                    {/* Error/Success Message */}\r\n                    {(error || successMessage) && (\r\n                        <div className={getMessageClass()}>\r\n                            {error || successMessage}\r\n                        </div>\r\n                    )}\r\n                    \r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"login-button\"\r\n                        disabled={\r\n                            isResetFlow ? !email.trim() : \r\n                            !username.trim() || !password.trim() || (isSignUp && (!fullName.trim() || !email.trim()))\r\n                        }\r\n                    >\r\n                        {isResetFlow ? 'Send Reset Link' : (isSignUp ? 'Sign Up' : 'Log In')}\r\n                    </button>\r\n                    \r\n                </form>\r\n                \r\n                <button\r\n                    onClick={handleToggleAuth}\r\n                    className=\"toggle-auth-button\"\r\n                >\r\n                    {isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'}\r\n                </button>\r\n                \r\n                {/* Back button for Reset Flow */}\r\n                {isResetFlow && (\r\n                    <button onClick={handleBackToLogin} className=\"toggle-auth-button\">\r\n                        Back to Login\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}