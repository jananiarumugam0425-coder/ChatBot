{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\ChatPage\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './ChatPage.css';\nimport ChatPageView from './ChatPageView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst ChatPage = ({\n  user,\n  sessionToken,\n  onSignOut\n}) => {\n  _s();\n  const {\n    chatId: urlChatId\n  } = useParams(); // Get chatId from URL\n  const navigate = useNavigate(); // For programmatic navigation\n\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [currentChatId, setCurrentChatId] = useState(urlChatId || null);\n  const [chatSessions, setChatSessions] = useState([]);\n  const [hasLoadedSessions, setHasLoadedSessions] = useState(false);\n  const chatEndRef = useRef(null);\n\n  // Sync URL with current chat ID\n  useEffect(() => {\n    if (currentChatId && currentChatId !== urlChatId) {\n      navigate(`/chat/${currentChatId}`, {\n        replace: true\n      });\n    }\n  }, [currentChatId, urlChatId, navigate]);\n\n  // Fetch chat sessions on component mount\n  useEffect(() => {\n    if (sessionToken) {\n      fetchChatSessions();\n    }\n  }, [sessionToken]);\n\n  // Load chat from URL parameter if provided\n  useEffect(() => {\n    if (urlChatId && sessionToken && hasLoadedSessions) {\n      const chatExists = chatSessions.some(session => session.chat_id === urlChatId);\n      if (chatExists) {\n        loadChatSession(urlChatId);\n      } else {\n        setError(\"\");\n        navigate('/chat', {\n          replace: true\n        });\n      }\n    }\n  }, [urlChatId, sessionToken, hasLoadedSessions, chatSessions, navigate]);\n  const fetchChatSessions = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/sessions`, {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch chat sessions.\");\n      }\n      const data = await response.json();\n      setChatSessions(data.sessions || []);\n      setHasLoadedSessions(true);\n    } catch (error) {\n      console.error(\"Error fetching chat sessions:\", error);\n      setError(\"Could not load chat sessions.\");\n      setHasLoadedSessions(true);\n    }\n  };\n  const createNewChatSession = async (sessionName = null) => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`${API_BASE_URL}/chat/sessions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: JSON.stringify({\n          session_name: sessionName\n        })\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to create chat session.');\n      }\n      setCurrentChatId(data.chat_id);\n      setMessages([]);\n      await fetchChatSessions(); // Refresh sessions list\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const loadChatSession = async chatId => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`${API_BASE_URL}/chat/sessions/${chatId}`, {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to load chat session.\");\n      }\n      const data = await response.json();\n      setMessages(data.messages || []);\n      setCurrentChatId(chatId);\n    } catch (error) {\n      console.error(\"Error loading chat session:\", error);\n      setError(\"Could not load chat session.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const deleteChatSession = async chatId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/sessions/${chatId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to delete chat session.\");\n      }\n\n      // If we're deleting the current chat, clear the current view and navigate to main chat\n      if (currentChatId === chatId) {\n        setCurrentChatId(null);\n        setMessages([]);\n        navigate('/chat', {\n          replace: true\n        });\n      }\n      await fetchChatSessions(); // Refresh sessions list\n    } catch (error) {\n      console.error(\"Error deleting chat session:\", error);\n      setError(\"Could not delete chat session.\");\n    }\n  };\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    const userQuery = input.trim();\n\n    // If no current chat exists, create one first\n    if (!currentChatId) {\n      await createNewChatSession();\n      // Wait a moment for the chat to be created, then send the message\n      setTimeout(() => {\n        sendMessageToChat(userQuery);\n      }, 100);\n      return;\n    }\n    if (!userQuery || isLoading || !sessionToken) return;\n    sendMessageToChat(userQuery);\n  };\n  const sendMessageToChat = async userQuery => {\n    setIsLoading(true);\n    setInput('');\n    setError('');\n    const newMessage = {\n      sender: 'user',\n      text: userQuery,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: JSON.stringify({\n          query: userQuery,\n          chat_id: currentChatId,\n          timestamp: newMessage.timestamp\n        })\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to get response from chatbot.');\n      }\n      const botMessage = {\n        sender: 'bot',\n        text: data.answer,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleFileUpload = async file => {\n    // If no current chat exists, create one first\n    if (!currentChatId) {\n      await createNewChatSession();\n      // Wait a moment for the chat to be created, then upload the file\n      setTimeout(() => {\n        uploadFileToChat(file);\n      }, 100);\n      return;\n    }\n    if (isLoading || !sessionToken) return;\n    uploadFileToChat(file);\n  };\n  const uploadFileToChat = async file => {\n    setIsLoading(true);\n    setError('');\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: formData\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'File upload failed.');\n      }\n\n      // Add bot confirmation message\n      const botMessage = {\n        sender: 'bot',\n        text: data.message,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Consolidate props for the view component\n  const viewProps = {\n    user,\n    messages,\n    input,\n    setInput,\n    isLoading,\n    error,\n    chatEndRef,\n    onSignOut,\n    currentChatId,\n    chatSessions,\n    hasLoadedSessions,\n    handleSendMessage,\n    handleFileUpload,\n    createNewChatSession,\n    loadChatSession,\n    deleteChatSession,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(ChatPageView, {\n    ...viewProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"CVRg9BbPOprRkZZP/kTGNGzT+X0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","ChatPageView","jsxDEV","_jsxDEV","API_BASE_URL","ChatPage","user","sessionToken","onSignOut","_s","chatId","urlChatId","navigate","messages","setMessages","input","setInput","isLoading","setIsLoading","error","setError","currentChatId","setCurrentChatId","chatSessions","setChatSessions","hasLoadedSessions","setHasLoadedSessions","chatEndRef","replace","fetchChatSessions","chatExists","some","session","chat_id","loadChatSession","response","fetch","headers","status","ok","Error","data","json","sessions","console","createNewChatSession","sessionName","method","body","JSON","stringify","session_name","err","message","deleteChatSession","_chatEndRef$current","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","userQuery","trim","setTimeout","sendMessageToChat","newMessage","sender","text","timestamp","Date","toISOString","prev","query","botMessage","answer","handleFileUpload","file","uploadFileToChat","formData","FormData","append","viewProps","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/ChatPage/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './ChatPage.css'; \r\nimport ChatPageView from './ChatPageView';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst ChatPage = ({ user, sessionToken, onSignOut }) => {\r\n    const { chatId: urlChatId } = useParams(); // Get chatId from URL\r\n    const navigate = useNavigate(); // For programmatic navigation\r\n    \r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [currentChatId, setCurrentChatId] = useState(urlChatId || null);\r\n    const [chatSessions, setChatSessions] = useState([]);\r\n    const [hasLoadedSessions, setHasLoadedSessions] = useState(false);\r\n    const chatEndRef = useRef(null);\r\n\r\n    // Sync URL with current chat ID\r\n    useEffect(() => {\r\n        if (currentChatId && currentChatId !== urlChatId) {\r\n            navigate(`/chat/${currentChatId}`, { replace: true });\r\n        }\r\n    }, [currentChatId, urlChatId, navigate]);\r\n\r\n    // Fetch chat sessions on component mount\r\n    useEffect(() => {\r\n        if (sessionToken) {\r\n            fetchChatSessions();\r\n        }\r\n    }, [sessionToken]);\r\n\r\n    // Load chat from URL parameter if provided\r\n    useEffect(() => {\r\n        if (urlChatId && sessionToken && hasLoadedSessions) {\r\n            const chatExists = chatSessions.some(session => session.chat_id === urlChatId);\r\n            if (chatExists) {\r\n                loadChatSession(urlChatId);\r\n            } else {\r\n                setError(\"\");\r\n                navigate('/chat', { replace: true });\r\n            }\r\n        }\r\n    }, [urlChatId, sessionToken, hasLoadedSessions, chatSessions, navigate]);\r\n\r\n    const fetchChatSessions = async () => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat/sessions`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut(); \r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to fetch chat sessions.\");\r\n            }\r\n\r\n            const data = await response.json();\r\n            setChatSessions(data.sessions || []);\r\n            setHasLoadedSessions(true);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching chat sessions:\", error);\r\n            setError(\"Could not load chat sessions.\");\r\n            setHasLoadedSessions(true);\r\n        }\r\n    };\r\n\r\n    const createNewChatSession = async (sessionName = null) => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await fetch(`${API_BASE_URL}/chat/sessions`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                },\r\n                body: JSON.stringify({ session_name: sessionName })\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to create chat session.');\r\n            }\r\n\r\n            setCurrentChatId(data.chat_id);\r\n            setMessages([]);\r\n            await fetchChatSessions(); // Refresh sessions list\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const loadChatSession = async (chatId) => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await fetch(`${API_BASE_URL}/chat/sessions/${chatId}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to load chat session.\");\r\n            }\r\n\r\n            const data = await response.json();\r\n            setMessages(data.messages || []);\r\n            setCurrentChatId(chatId);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error loading chat session:\", error);\r\n            setError(\"Could not load chat session.\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const deleteChatSession = async (chatId) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat/sessions/${chatId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to delete chat session.\");\r\n            }\r\n\r\n            // If we're deleting the current chat, clear the current view and navigate to main chat\r\n            if (currentChatId === chatId) {\r\n                setCurrentChatId(null);\r\n                setMessages([]);\r\n                navigate('/chat', { replace: true });\r\n            }\r\n\r\n            await fetchChatSessions(); // Refresh sessions list\r\n\r\n        } catch (error) {\r\n            console.error(\"Error deleting chat session:\", error);\r\n            setError(\"Could not delete chat session.\");\r\n        }\r\n    };\r\n\r\n    // Scroll to bottom when messages change\r\n    useEffect(() => {\r\n        chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        const userQuery = input.trim();\r\n        \r\n        // If no current chat exists, create one first\r\n        if (!currentChatId) {\r\n            await createNewChatSession();\r\n            // Wait a moment for the chat to be created, then send the message\r\n            setTimeout(() => {\r\n                sendMessageToChat(userQuery);\r\n            }, 100);\r\n            return;\r\n        }\r\n        \r\n        if (!userQuery || isLoading || !sessionToken) return;\r\n        \r\n        sendMessageToChat(userQuery);\r\n    };\r\n\r\n    const sendMessageToChat = async (userQuery) => {\r\n        setIsLoading(true);\r\n        setInput('');\r\n        setError('');\r\n\r\n        const newMessage = { sender: 'user', text: userQuery, timestamp: new Date().toISOString() };\r\n        setMessages(prev => [...prev, newMessage]);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                },\r\n                body: JSON.stringify({ \r\n                    query: userQuery, \r\n                    chat_id: currentChatId,\r\n                    timestamp: newMessage.timestamp \r\n                }),\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to get response from chatbot.');\r\n            }\r\n\r\n            const botMessage = { sender: 'bot', text: data.answer, timestamp: new Date().toISOString() };\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleFileUpload = async (file) => {\r\n        // If no current chat exists, create one first\r\n        if (!currentChatId) {\r\n            await createNewChatSession();\r\n            // Wait a moment for the chat to be created, then upload the file\r\n            setTimeout(() => {\r\n                uploadFileToChat(file);\r\n            }, 100);\r\n            return;\r\n        }\r\n        \r\n        if (isLoading || !sessionToken) return;\r\n        \r\n        uploadFileToChat(file);\r\n    };\r\n\r\n    const uploadFileToChat = async (file) => {\r\n        setIsLoading(true);\r\n        setError('');\r\n        \r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        \r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/upload`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}` \r\n                },\r\n                body: formData,\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'File upload failed.');\r\n            }\r\n            \r\n            // Add bot confirmation message\r\n            const botMessage = { sender: 'bot', text: data.message, timestamp: new Date().toISOString() };\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Consolidate props for the view component\r\n    const viewProps = {\r\n        user, messages, input, setInput, isLoading, error, chatEndRef, onSignOut,\r\n        currentChatId, chatSessions, hasLoadedSessions,\r\n        handleSendMessage, handleFileUpload,\r\n        createNewChatSession, loadChatSession, deleteChatSession,\r\n        setError\r\n    };\r\n\r\n    return (\r\n        <ChatPageView {...viewProps} />\r\n    );\r\n};\r\n\r\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}