{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\ForgotPassword\\\\ForgotPassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ForgotPasswordView from './ForgotPasswordView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst ForgotPassword = () => {\n  _s();\n  const [step, setStep] = useState(1); // 1: Verify username, 2: Reset password\n  const [username, setUsername] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleVerifyUsername = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!username.trim()) {\n      setError('Please enter your username.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/verify_username`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Username verification failed.');\n      }\n      setMessage(\"Username verified. Please set a new password.\");\n      setStep(2);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!username.trim()) {\n      setError('Error: Username state lost. Please restart the process.');\n      setStep(1);\n      return;\n    }\n    if (newPassword.length < 6) {\n      setError('New password must be at least 6 characters long.');\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/reset_password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          new_password: newPassword\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Password reset failed.');\n      }\n      setMessage(data.message);\n\n      // Redirect to login after successful reset\n      setTimeout(() => {\n        navigate('/login', {\n          state: {\n            message: 'Password successfully reset. Please log in with your new password.'\n          }\n        });\n      }, 3000);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const resetProcess = () => {\n    setStep(1);\n    setUsername('');\n    setNewPassword('');\n    setConfirmPassword('');\n    setError('');\n    setMessage('');\n  };\n\n  // Pass all data and handlers to the view component\n  const viewProps = {\n    step,\n    username,\n    newPassword,\n    confirmPassword,\n    error,\n    message,\n    isLoading,\n    setUsername,\n    setNewPassword,\n    setConfirmPassword,\n    handleVerifyUsername,\n    handleResetPassword,\n    resetProcess\n  };\n  return /*#__PURE__*/_jsxDEV(ForgotPasswordView, {\n    ...viewProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 12\n  }, this);\n};\n_s(ForgotPassword, \"Kdd5hKE5UoEdMjfKIQMEo37mIis=\", false, function () {\n  return [useNavigate];\n});\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useState","useNavigate","ForgotPasswordView","jsxDEV","_jsxDEV","API_BASE_URL","ForgotPassword","_s","step","setStep","username","setUsername","newPassword","setNewPassword","confirmPassword","setConfirmPassword","error","setError","message","setMessage","isLoading","setIsLoading","navigate","handleVerifyUsername","e","preventDefault","trim","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","err","handleResetPassword","length","new_password","setTimeout","state","resetProcess","viewProps","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/ForgotPassword/ForgotPassword.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ForgotPasswordView from './ForgotPasswordView';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst ForgotPassword = () => {\r\n    const [step, setStep] = useState(1); // 1: Verify username, 2: Reset password\r\n    const [username, setUsername] = useState('');\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const handleVerifyUsername = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!username.trim()) {\r\n            setError('Please enter your username.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/verify_username`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ username }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Username verification failed.');\r\n            }\r\n\r\n            setMessage(\"Username verified. Please set a new password.\");\r\n            setStep(2);\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleResetPassword = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!username.trim()) {\r\n            setError('Error: Username state lost. Please restart the process.');\r\n            setStep(1);\r\n            return;\r\n        }\r\n\r\n        if (newPassword.length < 6) {\r\n            setError('New password must be at least 6 characters long.');\r\n            return;\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            setError('Passwords do not match.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/reset_password`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ \r\n                    username, \r\n                    new_password: newPassword \r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Password reset failed.');\r\n            }\r\n\r\n            setMessage(data.message);\r\n            \r\n            // Redirect to login after successful reset\r\n            setTimeout(() => {\r\n                navigate('/login', { \r\n                    state: { \r\n                        message: 'Password successfully reset. Please log in with your new password.' \r\n                    } \r\n                });\r\n            }, 3000);\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const resetProcess = () => {\r\n        setStep(1);\r\n        setUsername('');\r\n        setNewPassword('');\r\n        setConfirmPassword('');\r\n        setError('');\r\n        setMessage('');\r\n    };\r\n\r\n    // Pass all data and handlers to the view component\r\n    const viewProps = {\r\n        step,\r\n        username,\r\n        newPassword,\r\n        confirmPassword,\r\n        error,\r\n        message,\r\n        isLoading,\r\n        setUsername,\r\n        setNewPassword,\r\n        setConfirmPassword,\r\n        handleVerifyUsername,\r\n        handleResetPassword,\r\n        resetProcess\r\n    };\r\n\r\n    return <ForgotPasswordView {...viewProps} />;\r\n};\r\n\r\nexport default ForgotPassword;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}