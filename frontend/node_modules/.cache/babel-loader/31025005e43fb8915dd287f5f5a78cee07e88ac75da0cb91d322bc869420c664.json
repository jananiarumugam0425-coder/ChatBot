{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Login from './components/Login/Login';\nimport ChatPage from './components/ChatPage/ChatPage';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // The state for user and token\n  const [user, setUser] = useState(null);\n  const [sessionToken, setSessionToken] = useState(null);\n  const handleLogin = (username, token) => {\n    setUser(username);\n    setSessionToken(token);\n  };\n  const handleSignOut = () => {\n    // You might want to implement a backend call to invalidate the token here too\n    setUser(null);\n    setSessionToken(null);\n  };\n\n  // Conditional rendering based on user authentication\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ChatPage, {\n    user: user,\n    sessionToken: sessionToken,\n    onSignOut: handleSignOut\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 12\n  }, this);\n};\n_s(App, \"5uq+qLQcqFI9ASxWp3bCC6hpWnc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Login","ChatPage","jsxDEV","_jsxDEV","App","_s","user","setUser","sessionToken","setSessionToken","handleLogin","username","token","handleSignOut","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","onSignOut","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Login from './components/Login/Login'; \r\nimport ChatPage from './components/ChatPage/ChatPage'; \r\nimport './index.css';\r\n\r\nconst App = () => {\r\n    // The state for user and token\r\n    const [user, setUser] = useState(null);\r\n    const [sessionToken, setSessionToken] = useState(null);\r\n\r\n    const handleLogin = (username, token) => {\r\n        setUser(username);\r\n        setSessionToken(token);\r\n    };\r\n\r\n    const handleSignOut = () => {\r\n        // You might want to implement a backend call to invalidate the token here too\r\n        setUser(null);\r\n        setSessionToken(null);\r\n    };\r\n\r\n    // Conditional rendering based on user authentication\r\n    if (!user) {\r\n        return <Login onLogin={handleLogin} />;\r\n    }\r\n\r\n    return <ChatPage user={user} sessionToken={sessionToken} onSignOut={handleSignOut} />;\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMW,WAAW,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACrCL,OAAO,CAACI,QAAQ,CAAC;IACjBF,eAAe,CAACG,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACxB;IACAN,OAAO,CAAC,IAAI,CAAC;IACbE,eAAe,CAAC,IAAI,CAAC;EACzB,CAAC;;EAED;EACA,IAAI,CAACH,IAAI,EAAE;IACP,oBAAOH,OAAA,CAACH,KAAK;MAACc,OAAO,EAAEJ;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1C;EAEA,oBAAOf,OAAA,CAACF,QAAQ;IAACK,IAAI,EAAEA,IAAK;IAACE,YAAY,EAAEA,YAAa;IAACW,SAAS,EAAEN;EAAc;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzF,CAAC;AAACb,EAAA,CAtBID,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AAwBT,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}