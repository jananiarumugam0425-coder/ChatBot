{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Login\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Login.css';\n\n// Set the base URL for the Flask backend\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\n// Define states for the different views/pages\nconst VIEW_STATES = {\n  AUTH: 'auth',\n  // Default view (handles Login and Sign Up toggle)\n  VERIFY_USERNAME: 'verify_username',\n  // Step 1 of Forgot Password\n  RESET_PASSWORD: 'reset_password' // Step 2 of Forgot Password\n};\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  // --- AUTHENTICATION STATE ---\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [country, setCountry] = useState('');\n\n  // --- UI & RESET STATE ---\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const [currentView, setCurrentView] = useState(VIEW_STATES.AUTH);\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  // Effect to manage state cleanup when switching modes/views\n  useEffect(() => {\n    // Clear unnecessary fields when switching between views\n    if (currentView === VIEW_STATES.AUTH) {\n      setPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n      // Only clear username if we're switching between login/signup mode\n      if (isSignUp) {\n        setFullName('');\n        setEmail('');\n        setPhoneNumber('');\n        setCountry('');\n      } else {\n        setFullName('');\n        setEmail('');\n        setPhoneNumber('');\n        setCountry('');\n      }\n    }\n\n    // Always clear messages when the view or mode changes\n    setError('');\n    setMessage('');\n  }, [isSignUp, currentView]);\n\n  // Helper function to determine CSS class for messages\n  const getMessageClass = () => {\n    if (error) return 'login-error';\n    if (message) return 'login-success';\n    return '';\n  };\n\n  /* -------------------------------------------\r\n     --- AUTHENTICATION LOGIC (Login / Sign Up)---\r\n     ------------------------------------------- */\n\n  const handleAuth = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\n    const body = isSignUp ? JSON.stringify({\n      username,\n      password,\n      full_name: fullName,\n      email,\n      phone_number: phoneNumber,\n      country: country\n    }) : JSON.stringify({\n      username,\n      password\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setPassword('');\n        throw new Error(data.error || 'Authentication failed.');\n      }\n      if (isSignUp) {\n        setMessage('Sign-up successful! Please log in now.');\n        setIsSignUp(false); // Switch back to login view\n      } else if (data.session_token) {\n        // Successful login\n        onLogin(username, data.session_token);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Toggles between Login and Sign Up forms\n  const handleToggleAuth = () => {\n    setIsSignUp(!isSignUp);\n    setUsername(''); // Clear username on toggle for fresh start\n    setError('');\n  };\n\n  /* -------------------------------------------\r\n     --- PASSWORD RESET LOGIC ---\r\n     ------------------------------------------- */\n\n  // Step 1: Verify Username\n  const handleVerifyUsername = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!username.trim()) {\n      setError('Please enter your username.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/verify_username`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        // Displays \"User not found.\" error from backend\n        throw new Error(data.error || 'Username verification failed.');\n      }\n\n      // Success! Move to password reset step, keeping username in state\n      setMessage(\"Username verified. Set a new password.\");\n      setCurrentView(VIEW_STATES.RESET_PASSWORD);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Step 2: Reset Password\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!username.trim()) {\n      setError('Error: Username state lost. Please restart the process.');\n      setCurrentView(VIEW_STATES.AUTH);\n      return;\n    }\n    if (newPassword.length < 6) {\n      setError('New password must be at least 6 characters long.');\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/reset_password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          new_password: newPassword\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Password reset failed.');\n      }\n      setMessage(data.message);\n\n      // Redirect back to login after successful reset\n      setTimeout(() => {\n        setUsername('');\n        setPassword('');\n        setCurrentView(VIEW_STATES.AUTH);\n        setMessage('Success! You can now log in with your new password.');\n      }, 3000);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  /* -------------------------------------------\r\n     --- RENDER FUNCTIONS ---\r\n     ------------------------------------------- */\n\n  const renderAuthForm = () => /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleAuth,\n    className: \"login-form\",\n    autoComplete: \"off\",\n    children: [isSignUp && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Full Name\",\n        className: \"login-input\",\n        value: fullName,\n        onChange: e => setFullName(e.target.value),\n        required: true,\n        autoComplete: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        className: \"login-input\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true,\n        autoComplete: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"tel\",\n        placeholder: \"Phone Number\",\n        className: \"login-input\",\n        value: phoneNumber,\n        onChange: e => setPhoneNumber(e.target.value),\n        required: true,\n        autoComplete: \"tel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Country\",\n        className: \"login-input\",\n        value: country,\n        onChange: e => setCountry(e.target.value),\n        required: true,\n        autoComplete: \"country-name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      className: \"login-input\",\n      value: username,\n      onChange: e => setUsername(e.target.value),\n      required: true,\n      autoComplete: \"username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      className: \"login-input\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      required: true,\n      autoComplete: isSignUp ? \"new-password\" : \"current-password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), !isSignUp && /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        setPassword('');\n        setCurrentView(VIEW_STATES.VERIFY_USERNAME);\n      },\n      className: \"forgot-password-button\",\n      children: \"Forgot Password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"login-button\",\n      children: isSignUp ? 'Sign Up' : 'Log In'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 9\n  }, this);\n  const renderVerifyUsernameForm = () => /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleVerifyUsername,\n    className: \"login-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"login-info\",\n      children: \"Enter your **username** to find your account.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Username\",\n      className: \"login-input\",\n      value: username,\n      onChange: e => setUsername(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"login-button\",\n      children: \"Verify Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 9\n  }, this);\n  const renderResetPasswordForm = () => /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleResetPassword,\n    className: \"login-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"login-info\",\n      children: [\"Set a new password for user: **\", username, \"**\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"New Password (min 6 chars)\",\n      className: \"login-input\",\n      value: newPassword,\n      onChange: e => setNewPassword(e.target.value),\n      required: true,\n      autoComplete: \"new-password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Confirm New Password\",\n      className: \"login-input\",\n      value: confirmPassword,\n      onChange: e => setConfirmPassword(e.target.value),\n      required: true,\n      autoComplete: \"new-password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"login-button\",\n      disabled: !newPassword || newPassword !== confirmPassword || !username.trim(),\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 9\n  }, this);\n\n  // --- RENDER MAIN CARD ---\n\n  let title;\n  let content;\n  switch (currentView) {\n    case VIEW_STATES.VERIFY_USERNAME:\n      title = 'Forgot Password';\n      content = renderVerifyUsernameForm();\n      break;\n    case VIEW_STATES.RESET_PASSWORD:\n      title = 'Set New Password';\n      content = renderResetPasswordForm();\n      break;\n    case VIEW_STATES.AUTH:\n    default:\n      title = isSignUp ? 'Sign Up' : 'Log In';\n      content = renderAuthForm();\n      break;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"login-title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), (message || error) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getMessageClass(),\n        children: message || error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 40\n      }, this), content, currentView === VIEW_STATES.AUTH ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleAuth,\n        className: \"toggle-auth-button\",\n        children: isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // Only clear username if we're going from Reset back to Login\n          if (currentView === VIEW_STATES.RESET_PASSWORD) {\n            setUsername('');\n          }\n          setCurrentView(VIEW_STATES.AUTH);\n        },\n        className: \"toggle-auth-button\",\n        children: \"\\u2190 Back to Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"NKWrWZdBBWhj32RM6wbvyMSVhfY=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","VIEW_STATES","AUTH","VERIFY_USERNAME","RESET_PASSWORD","Login","onLogin","_s","username","setUsername","password","setPassword","fullName","setFullName","email","setEmail","phoneNumber","setPhoneNumber","country","setCountry","isSignUp","setIsSignUp","error","setError","message","setMessage","currentView","setCurrentView","newPassword","setNewPassword","confirmPassword","setConfirmPassword","getMessageClass","handleAuth","e","preventDefault","url","body","JSON","stringify","full_name","phone_number","response","fetch","method","headers","data","json","ok","Error","session_token","err","handleToggleAuth","handleVerifyUsername","trim","handleResetPassword","length","new_password","setTimeout","renderAuthForm","onSubmit","className","autoComplete","children","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","onClick","renderVerifyUsernameForm","renderResetPasswordForm","disabled","title","content","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Login/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Login.css';\r\n\r\n// Set the base URL for the Flask backend\r\nconst API_BASE_URL = 'http://127.0.0.1:5000'; \r\n\r\n// Define states for the different views/pages\r\nconst VIEW_STATES = {\r\n    AUTH: 'auth', // Default view (handles Login and Sign Up toggle)\r\n    VERIFY_USERNAME: 'verify_username', // Step 1 of Forgot Password\r\n    RESET_PASSWORD: 'reset_password', // Step 2 of Forgot Password\r\n};\r\n\r\nconst Login = ({ onLogin }) => {\r\n    // --- AUTHENTICATION STATE ---\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState(''); \r\n    const [country, setCountry] = useState('');    \r\n    \r\n    // --- UI & RESET STATE ---\r\n    const [isSignUp, setIsSignUp] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [currentView, setCurrentView] = useState(VIEW_STATES.AUTH); \r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n\r\n    // Effect to manage state cleanup when switching modes/views\r\n    useEffect(() => {\r\n        // Clear unnecessary fields when switching between views\r\n        if (currentView === VIEW_STATES.AUTH) {\r\n            setPassword('');\r\n            setNewPassword('');\r\n            setConfirmPassword('');\r\n            // Only clear username if we're switching between login/signup mode\r\n            if (isSignUp) { \r\n                setFullName('');\r\n                setEmail('');\r\n                setPhoneNumber(''); \r\n                setCountry(''); \r\n            } else {\r\n                 setFullName('');\r\n                 setEmail('');\r\n                 setPhoneNumber(''); \r\n                 setCountry(''); \r\n            }\r\n        }\r\n        \r\n        // Always clear messages when the view or mode changes\r\n        setError('');\r\n        setMessage('');\r\n        \r\n    }, [isSignUp, currentView]); \r\n\r\n    // Helper function to determine CSS class for messages\r\n    const getMessageClass = () => {\r\n        if (error) return 'login-error';\r\n        if (message) return 'login-success';\r\n        return '';\r\n    }\r\n\r\n    /* -------------------------------------------\r\n       --- AUTHENTICATION LOGIC (Login / Sign Up)---\r\n       ------------------------------------------- */\r\n\r\n    const handleAuth = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n        const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\r\n\r\n        const body = isSignUp \r\n            ? JSON.stringify({ \r\n                username, \r\n                password, \r\n                full_name: fullName, \r\n                email,\r\n                phone_number: phoneNumber,\r\n                country: country\r\n            }) \r\n            : JSON.stringify({ username, password });\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: body,\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setPassword('');\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            if (isSignUp) {\r\n                setMessage('Sign-up successful! Please log in now.');\r\n                setIsSignUp(false); // Switch back to login view\r\n            } else if (data.session_token) {\r\n                // Successful login\r\n                onLogin(username, data.session_token); \r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    \r\n    // Toggles between Login and Sign Up forms\r\n    const handleToggleAuth = () => {\r\n        setIsSignUp(!isSignUp);\r\n        setUsername(''); // Clear username on toggle for fresh start\r\n        setError(''); \r\n    }\r\n\r\n    /* -------------------------------------------\r\n       --- PASSWORD RESET LOGIC ---\r\n       ------------------------------------------- */\r\n\r\n    // Step 1: Verify Username\r\n    const handleVerifyUsername = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!username.trim()) {\r\n            setError('Please enter your username.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/verify_username`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                // Displays \"User not found.\" error from backend\r\n                throw new Error(data.error || 'Username verification failed.');\r\n            }\r\n\r\n            // Success! Move to password reset step, keeping username in state\r\n            setMessage(\"Username verified. Set a new password.\");\r\n            setCurrentView(VIEW_STATES.RESET_PASSWORD); \r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    // Step 2: Reset Password\r\n    const handleResetPassword = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!username.trim()) {\r\n            setError('Error: Username state lost. Please restart the process.');\r\n            setCurrentView(VIEW_STATES.AUTH);\r\n            return;\r\n        }\r\n\r\n        if (newPassword.length < 6) {\r\n            setError('New password must be at least 6 characters long.');\r\n            return;\r\n        }\r\n        if (newPassword !== confirmPassword) {\r\n            setError('Passwords do not match.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/reset_password`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, new_password: newPassword }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Password reset failed.');\r\n            }\r\n\r\n            setMessage(data.message);\r\n            \r\n            // Redirect back to login after successful reset\r\n            setTimeout(() => {\r\n                setUsername(''); \r\n                setPassword('');\r\n                setCurrentView(VIEW_STATES.AUTH);\r\n                setMessage('Success! You can now log in with your new password.');\r\n            }, 3000);\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n\r\n    /* -------------------------------------------\r\n       --- RENDER FUNCTIONS ---\r\n       ------------------------------------------- */\r\n\r\n    const renderAuthForm = () => (\r\n        <form onSubmit={handleAuth} className=\"login-form\" autoComplete=\"off\">\r\n            \r\n            {/* Sign Up Specific Fields */}\r\n            {isSignUp && (\r\n                <>\r\n                    <input type=\"text\" placeholder=\"Full Name\" className=\"login-input\" value={fullName} onChange={(e) => setFullName(e.target.value)} required autoComplete=\"name\" />\r\n                    <input type=\"email\" placeholder=\"Email\" className=\"login-input\" value={email} onChange={(e) => setEmail(e.target.value)} required autoComplete=\"email\" />\r\n                    <input type=\"tel\" placeholder=\"Phone Number\" className=\"login-input\" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} required autoComplete=\"tel\" />\r\n                    <input type=\"text\" placeholder=\"Country\" className=\"login-input\" value={country} onChange={(e) => setCountry(e.target.value)} required autoComplete=\"country-name\" />\r\n                </>\r\n            )}\r\n\r\n            {/* Common Fields */}\r\n            <input type=\"text\" placeholder=\"Username\" className=\"login-input\" value={username} onChange={(e) => setUsername(e.target.value)} required autoComplete=\"username\" />\r\n            <input type=\"password\" placeholder=\"Password\" className=\"login-input\" value={password} onChange={(e) => setPassword(e.target.value)} required autoComplete={isSignUp ? \"new-password\" : \"current-password\"} />\r\n            \r\n            {/* Forgot Password Link (Only on Login View) */}\r\n            {!isSignUp && (\r\n                 <button \r\n                    type=\"button\" \r\n                    onClick={() => {\r\n                        setPassword(''); \r\n                        setCurrentView(VIEW_STATES.VERIFY_USERNAME);\r\n                    }} \r\n                    className=\"forgot-password-button\"\r\n                 >\r\n                    Forgot Password?\r\n                 </button>\r\n            )}\r\n            \r\n            <button \r\n                type=\"submit\" \r\n                className=\"login-button\"\r\n            >\r\n                {isSignUp ? 'Sign Up' : 'Log In'}\r\n            </button>\r\n            \r\n        </form>\r\n    );\r\n\r\n    const renderVerifyUsernameForm = () => (\r\n        <form onSubmit={handleVerifyUsername} className=\"login-form\">\r\n            <p className='login-info'>Enter your **username** to find your account.</p>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter Username\"\r\n                className=\"login-input\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                required\r\n            />\r\n            <button type=\"submit\" className=\"login-button\">\r\n                Verify Username\r\n            </button>\r\n        </form>\r\n    );\r\n\r\n    const renderResetPasswordForm = () => (\r\n        <form onSubmit={handleResetPassword} className=\"login-form\">\r\n            <p className='login-info'>Set a new password for user: **{username}**</p>\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"New Password (min 6 chars)\"\r\n                className=\"login-input\"\r\n                value={newPassword}\r\n                onChange={(e) => setNewPassword(e.target.value)}\r\n                required\r\n                autoComplete=\"new-password\"\r\n            />\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Confirm New Password\"\r\n                className=\"login-input\"\r\n                value={confirmPassword}\r\n                onChange={(e) => setConfirmPassword(e.target.value)}\r\n                required\r\n                autoComplete=\"new-password\"\r\n            />\r\n            <button type=\"submit\" className=\"login-button\" disabled={!newPassword || newPassword !== confirmPassword || !username.trim()}>\r\n                Reset Password\r\n            </button>\r\n        </form>\r\n    );\r\n\r\n    // --- RENDER MAIN CARD ---\r\n\r\n    let title;\r\n    let content;\r\n\r\n    switch (currentView) {\r\n        case VIEW_STATES.VERIFY_USERNAME:\r\n            title = 'Forgot Password';\r\n            content = renderVerifyUsernameForm();\r\n            break;\r\n        case VIEW_STATES.RESET_PASSWORD:\r\n            title = 'Set New Password';\r\n            content = renderResetPasswordForm();\r\n            break;\r\n        case VIEW_STATES.AUTH:\r\n        default:\r\n            title = isSignUp ? 'Sign Up' : 'Log In';\r\n            content = renderAuthForm();\r\n            break;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-card\">\r\n                <h2 className=\"login-title\">{title}</h2>\r\n                \r\n                {/* Message/Error Display */}\r\n                {(message || error) && <div className={getMessageClass()}>{message || error}</div>}\r\n                \r\n                {content}\r\n                \r\n                {/* Toggle Button / Back to Login Button */}\r\n                {currentView === VIEW_STATES.AUTH ? (\r\n                    <button\r\n                        onClick={handleToggleAuth}\r\n                        className=\"toggle-auth-button\"\r\n                    >\r\n                        {isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'}\r\n                    </button>\r\n                ) : (\r\n                     <button\r\n                        onClick={() => {\r\n                            // Only clear username if we're going from Reset back to Login\r\n                            if (currentView === VIEW_STATES.RESET_PASSWORD) {\r\n                                setUsername(''); \r\n                            }\r\n                            setCurrentView(VIEW_STATES.AUTH);\r\n                        }}\r\n                        className=\"toggle-auth-button\"\r\n                    >\r\n                        &larr; Back to Log In\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;;AAEpB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,WAAW,GAAG;EAChBC,IAAI,EAAE,MAAM;EAAE;EACdC,eAAe,EAAE,iBAAiB;EAAE;EACpCC,cAAc,EAAE,gBAAgB,CAAE;AACtC,CAAC;AAED,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC3B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC8B,OAAO,EAAEC,UAAU,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACgC,WAAW,EAAEC,cAAc,CAAC,GAAGjC,QAAQ,CAACO,WAAW,CAACC,IAAI,CAAC;EAChE,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACoC,eAAe,EAAEC,kBAAkB,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;;EAG1D;EACAC,SAAS,CAAC,MAAM;IACZ;IACA,IAAI+B,WAAW,KAAKzB,WAAW,CAACC,IAAI,EAAE;MAClCS,WAAW,CAAC,EAAE,CAAC;MACfkB,cAAc,CAAC,EAAE,CAAC;MAClBE,kBAAkB,CAAC,EAAE,CAAC;MACtB;MACA,IAAIX,QAAQ,EAAE;QACVP,WAAW,CAAC,EAAE,CAAC;QACfE,QAAQ,CAAC,EAAE,CAAC;QACZE,cAAc,CAAC,EAAE,CAAC;QAClBE,UAAU,CAAC,EAAE,CAAC;MAClB,CAAC,MAAM;QACFN,WAAW,CAAC,EAAE,CAAC;QACfE,QAAQ,CAAC,EAAE,CAAC;QACZE,cAAc,CAAC,EAAE,CAAC;QAClBE,UAAU,CAAC,EAAE,CAAC;MACnB;IACJ;;IAEA;IACAI,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;EAElB,CAAC,EAAE,CAACL,QAAQ,EAAEM,WAAW,CAAC,CAAC;;EAE3B;EACA,MAAMM,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIV,KAAK,EAAE,OAAO,aAAa;IAC/B,IAAIE,OAAO,EAAE,OAAO,eAAe;IACnC,OAAO,EAAE;EACb,CAAC;;EAED;AACJ;AACA;;EAEI,MAAMS,UAAU,GAAG,MAAOC,CAAC,IAAK;IAC5BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBZ,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IACd,MAAMW,GAAG,GAAGhB,QAAQ,GAAG,GAAGpB,YAAY,SAAS,GAAG,GAAGA,YAAY,QAAQ;IAEzE,MAAMqC,IAAI,GAAGjB,QAAQ,GACfkB,IAAI,CAACC,SAAS,CAAC;MACb/B,QAAQ;MACRE,QAAQ;MACR8B,SAAS,EAAE5B,QAAQ;MACnBE,KAAK;MACL2B,YAAY,EAAEzB,WAAW;MACzBE,OAAO,EAAEA;IACb,CAAC,CAAC,GACAoB,IAAI,CAACC,SAAS,CAAC;MAAE/B,QAAQ;MAAEE;IAAS,CAAC,CAAC;IAE5C,IAAI;MACA,MAAMgC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;QAC9BQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CR,IAAI,EAAEA;MACV,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QACdrC,WAAW,CAAC,EAAE,CAAC;QACf,MAAM,IAAIsC,KAAK,CAACH,IAAI,CAACxB,KAAK,IAAI,wBAAwB,CAAC;MAC3D;MAEA,IAAIF,QAAQ,EAAE;QACVK,UAAU,CAAC,wCAAwC,CAAC;QACpDJ,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,MAAM,IAAIyB,IAAI,CAACI,aAAa,EAAE;QAC3B;QACA5C,OAAO,CAACE,QAAQ,EAAEsC,IAAI,CAACI,aAAa,CAAC;MACzC;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACV5B,QAAQ,CAAC4B,GAAG,CAAC3B,OAAO,CAAC;IACzB;EACJ,CAAC;;EAED;EACA,MAAM4B,gBAAgB,GAAGA,CAAA,KAAM;IAC3B/B,WAAW,CAAC,CAACD,QAAQ,CAAC;IACtBX,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACjBc,QAAQ,CAAC,EAAE,CAAC;EAChB,CAAC;;EAED;AACJ;AACA;;EAEI;EACA,MAAM8B,oBAAoB,GAAG,MAAOnB,CAAC,IAAK;IACtCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBZ,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI,CAACjB,QAAQ,CAAC8C,IAAI,CAAC,CAAC,EAAE;MAClB/B,QAAQ,CAAC,6BAA6B,CAAC;MACvC;IACJ;IAEA,IAAI;MACA,MAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,YAAY,kBAAkB,EAAE;QAC5D4C,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CR,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE/B;QAAS,CAAC;MACrC,CAAC,CAAC;MAEF,MAAMsC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QACd;QACA,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACxB,KAAK,IAAI,+BAA+B,CAAC;MAClE;;MAEA;MACAG,UAAU,CAAC,wCAAwC,CAAC;MACpDE,cAAc,CAAC1B,WAAW,CAACG,cAAc,CAAC;IAE9C,CAAC,CAAC,OAAO+C,GAAG,EAAE;MACV5B,QAAQ,CAAC4B,GAAG,CAAC3B,OAAO,CAAC;IACzB;EACJ,CAAC;;EAED;EACA,MAAM+B,mBAAmB,GAAG,MAAOrB,CAAC,IAAK;IACrCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBZ,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI,CAACjB,QAAQ,CAAC8C,IAAI,CAAC,CAAC,EAAE;MAClB/B,QAAQ,CAAC,yDAAyD,CAAC;MACnEI,cAAc,CAAC1B,WAAW,CAACC,IAAI,CAAC;MAChC;IACJ;IAEA,IAAI0B,WAAW,CAAC4B,MAAM,GAAG,CAAC,EAAE;MACxBjC,QAAQ,CAAC,kDAAkD,CAAC;MAC5D;IACJ;IACA,IAAIK,WAAW,KAAKE,eAAe,EAAE;MACjCP,QAAQ,CAAC,yBAAyB,CAAC;MACnC;IACJ;IAEA,IAAI;MACA,MAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,YAAY,iBAAiB,EAAE;QAC3D4C,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CR,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE/B,QAAQ;UAAEiD,YAAY,EAAE7B;QAAY,CAAC;MAChE,CAAC,CAAC;MAEF,MAAMkB,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACxB,KAAK,IAAI,wBAAwB,CAAC;MAC3D;MAEAG,UAAU,CAACqB,IAAI,CAACtB,OAAO,CAAC;;MAExB;MACAkC,UAAU,CAAC,MAAM;QACbjD,WAAW,CAAC,EAAE,CAAC;QACfE,WAAW,CAAC,EAAE,CAAC;QACfgB,cAAc,CAAC1B,WAAW,CAACC,IAAI,CAAC;QAChCuB,UAAU,CAAC,qDAAqD,CAAC;MACrE,CAAC,EAAE,IAAI,CAAC;IAEZ,CAAC,CAAC,OAAO0B,GAAG,EAAE;MACV5B,QAAQ,CAAC4B,GAAG,CAAC3B,OAAO,CAAC;IACzB;EACJ,CAAC;;EAGD;AACJ;AACA;;EAEI,MAAMmC,cAAc,GAAGA,CAAA,kBACnB9D,OAAA;IAAM+D,QAAQ,EAAE3B,UAAW;IAAC4B,SAAS,EAAC,YAAY;IAACC,YAAY,EAAC,KAAK;IAAAC,QAAA,GAGhE3C,QAAQ,iBACLvB,OAAA,CAAAE,SAAA;MAAAgE,QAAA,gBACIlE,OAAA;QAAOmE,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,WAAW;QAACJ,SAAS,EAAC,aAAa;QAACK,KAAK,EAAEtD,QAAS;QAACuD,QAAQ,EAAGjC,CAAC,IAAKrB,WAAW,CAACqB,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;QAACG,QAAQ;QAACP,YAAY,EAAC;MAAM;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjK5E,OAAA;QAAOmE,IAAI,EAAC,OAAO;QAACC,WAAW,EAAC,OAAO;QAACJ,SAAS,EAAC,aAAa;QAACK,KAAK,EAAEpD,KAAM;QAACqD,QAAQ,EAAGjC,CAAC,IAAKnB,QAAQ,CAACmB,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;QAACG,QAAQ;QAACP,YAAY,EAAC;MAAO;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzJ5E,OAAA;QAAOmE,IAAI,EAAC,KAAK;QAACC,WAAW,EAAC,cAAc;QAACJ,SAAS,EAAC,aAAa;QAACK,KAAK,EAAElD,WAAY;QAACmD,QAAQ,EAAGjC,CAAC,IAAKjB,cAAc,CAACiB,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;QAACG,QAAQ;QAACP,YAAY,EAAC;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACxK5E,OAAA;QAAOmE,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC,SAAS;QAACJ,SAAS,EAAC,aAAa;QAACK,KAAK,EAAEhD,OAAQ;QAACiD,QAAQ,EAAGjC,CAAC,IAAKf,UAAU,CAACe,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;QAACG,QAAQ;QAACP,YAAY,EAAC;MAAc;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACvK,CACL,eAGD5E,OAAA;MAAOmE,IAAI,EAAC,MAAM;MAACC,WAAW,EAAC,UAAU;MAACJ,SAAS,EAAC,aAAa;MAACK,KAAK,EAAE1D,QAAS;MAAC2D,QAAQ,EAAGjC,CAAC,IAAKzB,WAAW,CAACyB,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;MAACG,QAAQ;MAACP,YAAY,EAAC;IAAU;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpK5E,OAAA;MAAOmE,IAAI,EAAC,UAAU;MAACC,WAAW,EAAC,UAAU;MAACJ,SAAS,EAAC,aAAa;MAACK,KAAK,EAAExD,QAAS;MAACyD,QAAQ,EAAGjC,CAAC,IAAKvB,WAAW,CAACuB,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;MAACG,QAAQ;MAACP,YAAY,EAAE1C,QAAQ,GAAG,cAAc,GAAG;IAAmB;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAG7M,CAACrD,QAAQ,iBACLvB,OAAA;MACGmE,IAAI,EAAC,QAAQ;MACbU,OAAO,EAAEA,CAAA,KAAM;QACX/D,WAAW,CAAC,EAAE,CAAC;QACfgB,cAAc,CAAC1B,WAAW,CAACE,eAAe,CAAC;MAC/C,CAAE;MACF0D,SAAS,EAAC,wBAAwB;MAAAE,QAAA,EACpC;IAED;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACZ,eAED5E,OAAA;MACImE,IAAI,EAAC,QAAQ;MACbH,SAAS,EAAC,cAAc;MAAAE,QAAA,EAEvB3C,QAAQ,GAAG,SAAS,GAAG;IAAQ;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEP,CACT;EAED,MAAME,wBAAwB,GAAGA,CAAA,kBAC7B9E,OAAA;IAAM+D,QAAQ,EAAEP,oBAAqB;IAACQ,SAAS,EAAC,YAAY;IAAAE,QAAA,gBACxDlE,OAAA;MAAGgE,SAAS,EAAC,YAAY;MAAAE,QAAA,EAAC;IAA6C;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAC3E5E,OAAA;MACImE,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,gBAAgB;MAC5BJ,SAAS,EAAC,aAAa;MACvBK,KAAK,EAAE1D,QAAS;MAChB2D,QAAQ,EAAGjC,CAAC,IAAKzB,WAAW,CAACyB,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;MAC7CG,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC,eACF5E,OAAA;MAAQmE,IAAI,EAAC,QAAQ;MAACH,SAAS,EAAC,cAAc;MAAAE,QAAA,EAAC;IAE/C;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CACT;EAED,MAAMG,uBAAuB,GAAGA,CAAA,kBAC5B/E,OAAA;IAAM+D,QAAQ,EAAEL,mBAAoB;IAACM,SAAS,EAAC,YAAY;IAAAE,QAAA,gBACvDlE,OAAA;MAAGgE,SAAS,EAAC,YAAY;MAAAE,QAAA,GAAC,iCAA+B,EAACvD,QAAQ,EAAC,IAAE;IAAA;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACzE5E,OAAA;MACImE,IAAI,EAAC,UAAU;MACfC,WAAW,EAAC,4BAA4B;MACxCJ,SAAS,EAAC,aAAa;MACvBK,KAAK,EAAEtC,WAAY;MACnBuC,QAAQ,EAAGjC,CAAC,IAAKL,cAAc,CAACK,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;MAChDG,QAAQ;MACRP,YAAY,EAAC;IAAc;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACF5E,OAAA;MACImE,IAAI,EAAC,UAAU;MACfC,WAAW,EAAC,sBAAsB;MAClCJ,SAAS,EAAC,aAAa;MACvBK,KAAK,EAAEpC,eAAgB;MACvBqC,QAAQ,EAAGjC,CAAC,IAAKH,kBAAkB,CAACG,CAAC,CAACkC,MAAM,CAACF,KAAK,CAAE;MACpDG,QAAQ;MACRP,YAAY,EAAC;IAAc;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACF5E,OAAA;MAAQmE,IAAI,EAAC,QAAQ;MAACH,SAAS,EAAC,cAAc;MAACgB,QAAQ,EAAE,CAACjD,WAAW,IAAIA,WAAW,KAAKE,eAAe,IAAI,CAACtB,QAAQ,CAAC8C,IAAI,CAAC,CAAE;MAAAS,QAAA,EAAC;IAE9H;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CACT;;EAED;;EAEA,IAAIK,KAAK;EACT,IAAIC,OAAO;EAEX,QAAQrD,WAAW;IACf,KAAKzB,WAAW,CAACE,eAAe;MAC5B2E,KAAK,GAAG,iBAAiB;MACzBC,OAAO,GAAGJ,wBAAwB,CAAC,CAAC;MACpC;IACJ,KAAK1E,WAAW,CAACG,cAAc;MAC3B0E,KAAK,GAAG,kBAAkB;MAC1BC,OAAO,GAAGH,uBAAuB,CAAC,CAAC;MACnC;IACJ,KAAK3E,WAAW,CAACC,IAAI;IACrB;MACI4E,KAAK,GAAG1D,QAAQ,GAAG,SAAS,GAAG,QAAQ;MACvC2D,OAAO,GAAGpB,cAAc,CAAC,CAAC;MAC1B;EACR;EAGA,oBACI9D,OAAA;IAAKgE,SAAS,EAAC,iBAAiB;IAAAE,QAAA,eAC5BlE,OAAA;MAAKgE,SAAS,EAAC,YAAY;MAAAE,QAAA,gBACvBlE,OAAA;QAAIgE,SAAS,EAAC,aAAa;QAAAE,QAAA,EAAEe;MAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAGvC,CAACjD,OAAO,IAAIF,KAAK,kBAAKzB,OAAA;QAAKgE,SAAS,EAAE7B,eAAe,CAAC,CAAE;QAAA+B,QAAA,EAAEvC,OAAO,IAAIF;MAAK;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAEjFM,OAAO,EAGPrD,WAAW,KAAKzB,WAAW,CAACC,IAAI,gBAC7BL,OAAA;QACI6E,OAAO,EAAEtB,gBAAiB;QAC1BS,SAAS,EAAC,oBAAoB;QAAAE,QAAA,EAE7B3C,QAAQ,GAAG,iCAAiC,GAAG;MAA0B;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC,gBAER5E,OAAA;QACG6E,OAAO,EAAEA,CAAA,KAAM;UACX;UACA,IAAIhD,WAAW,KAAKzB,WAAW,CAACG,cAAc,EAAE;YAC5CK,WAAW,CAAC,EAAE,CAAC;UACnB;UACAkB,cAAc,CAAC1B,WAAW,CAACC,IAAI,CAAC;QACpC,CAAE;QACF2D,SAAS,EAAC,oBAAoB;QAAAE,QAAA,EACjC;MAED;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAClE,EAAA,CApVIF,KAAK;AAAA2E,EAAA,GAAL3E,KAAK;AAsVX,eAAeA,KAAK;AAAC,IAAA2E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}