{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Login\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Login.css';\nimport AuthForms from './Login'; // Import the new rendering component\n\n// Set the base URL for the Flask backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\n\n// Define states for the different views/pages\nconst VIEW_STATES = {\n  AUTH: 'auth',\n  // Default view (handles Login and Sign Up toggle)\n  VERIFY_USERNAME: 'verify_username',\n  // Step 1 of Forgot Password\n  RESET_PASSWORD: 'reset_password' // Step 2 of Forgot Password\n};\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  // --- AUTHENTICATION STATE ---\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [country, setCountry] = useState('');\n\n  // --- UI & RESET STATE ---\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const [currentView, setCurrentView] = useState(VIEW_STATES.AUTH);\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  // Effect to manage state cleanup when switching modes/views\n  useEffect(() => {\n    // Clear unnecessary fields when switching between views\n    if (currentView === VIEW_STATES.AUTH) {\n      setPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n      // Clear all sign-up specific fields regardless of whether we are switching modes or coming from a non-auth view.\n      setFullName('');\n      setEmail('');\n      setPhoneNumber('');\n      setCountry('');\n    }\n\n    // Always clear messages when the view or mode changes\n    setError('');\n    setMessage('');\n  }, [isSignUp, currentView]);\n\n  // Helper function to determine CSS class for messages\n  const getMessageClass = () => {\n    if (error) return 'login-error';\n    if (message) return 'login-success';\n    return '';\n  };\n\n  /* -------------------------------------------\r\n      --- AUTHENTICATION LOGIC (Login / Sign Up)---\r\n      ------------------------------------------- */\n\n  const handleAuth = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\n    const body = isSignUp ? JSON.stringify({\n      username,\n      password,\n      full_name: fullName,\n      email,\n      phone_number: phoneNumber,\n      country: country\n    }) : JSON.stringify({\n      username,\n      password\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setPassword('');\n        throw new Error(data.error || 'Authentication failed.');\n      }\n      if (isSignUp) {\n        setMessage('Sign-up successful! Please log in now.');\n        setIsSignUp(false); // Switch back to login view\n      } else if (data.session_token) {\n        // Successful login\n        onLogin(username, data.session_token);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Toggles between Login and Sign Up forms\n  const handleToggleAuth = () => {\n    setIsSignUp(!isSignUp);\n    setUsername(''); // Clear username on toggle for fresh start\n    setError('');\n  };\n\n  /* -------------------------------------------\r\n      --- PASSWORD RESET LOGIC ---\r\n      ------------------------------------------- */\n\n  // Step 1: Verify Username\n  const handleVerifyUsername = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!username.trim()) {\n      setError('Please enter your username.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/verify_username`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        // Displays \"User not found.\" error from backend\n        throw new Error(data.error || 'Username verification failed.');\n      }\n\n      // Success! Move to password reset step, keeping username in state\n      setMessage(\"Username verified. Set a new password.\");\n      setCurrentView(VIEW_STATES.RESET_PASSWORD);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Step 2: Reset Password\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!username.trim()) {\n      setError('Error: Username state lost. Please restart the process.');\n      setCurrentView(VIEW_STATES.AUTH);\n      return;\n    }\n    if (newPassword.length < 6) {\n      setError('New password must be at least 6 characters long.');\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/reset_password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          new_password: newPassword\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Password reset failed.');\n      }\n      setMessage(data.message);\n\n      // Redirect back to login after successful reset\n      setTimeout(() => {\n        setUsername('');\n        setPassword('');\n        setCurrentView(VIEW_STATES.AUTH);\n        setMessage('Success! You can now log in with your new password.');\n      }, 3000);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Consolidated props object to pass to the AuthForms component\n  const formProps = {\n    // State\n    username,\n    setUsername,\n    password,\n    setPassword,\n    fullName,\n    setFullName,\n    email,\n    setEmail,\n    phoneNumber,\n    setPhoneNumber,\n    country,\n    setCountry,\n    isSignUp,\n    newPassword,\n    setNewPassword,\n    confirmPassword,\n    setConfirmPassword,\n    currentView,\n    setCurrentView,\n    VIEW_STATES,\n    // Handlers\n    handleAuth,\n    handleVerifyUsername,\n    handleResetPassword,\n    handleToggleAuth,\n    // UI Helpers\n    title: isSignUp ? 'Sign Up' : 'Log In',\n    error,\n    message,\n    getMessageClass\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-card\",\n      children: /*#__PURE__*/_jsxDEV(AuthForms, {\n        ...formProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"NKWrWZdBBWhj32RM6wbvyMSVhfY=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","AuthForms","jsxDEV","_jsxDEV","API_BASE_URL","VIEW_STATES","AUTH","VERIFY_USERNAME","RESET_PASSWORD","Login","onLogin","_s","username","setUsername","password","setPassword","fullName","setFullName","email","setEmail","phoneNumber","setPhoneNumber","country","setCountry","isSignUp","setIsSignUp","error","setError","message","setMessage","currentView","setCurrentView","newPassword","setNewPassword","confirmPassword","setConfirmPassword","getMessageClass","handleAuth","e","preventDefault","url","body","JSON","stringify","full_name","phone_number","response","fetch","method","headers","data","json","ok","Error","session_token","err","handleToggleAuth","handleVerifyUsername","trim","handleResetPassword","length","new_password","setTimeout","formProps","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Login/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Login.css';\r\nimport AuthForms from './Login'; // Import the new rendering component\r\n\r\n// Set the base URL for the Flask backend\r\nconst API_BASE_URL = 'http://127.0.0.1:5000'; \r\n\r\n// Define states for the different views/pages\r\nconst VIEW_STATES = {\r\n    AUTH: 'auth', // Default view (handles Login and Sign Up toggle)\r\n    VERIFY_USERNAME: 'verify_username', // Step 1 of Forgot Password\r\n    RESET_PASSWORD: 'reset_password', // Step 2 of Forgot Password\r\n};\r\n\r\nconst Login = ({ onLogin }) => {\r\n    // --- AUTHENTICATION STATE ---\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState(''); \r\n    const [country, setCountry] = useState(''); \r\n    \r\n    // --- UI & RESET STATE ---\r\n    const [isSignUp, setIsSignUp] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [currentView, setCurrentView] = useState(VIEW_STATES.AUTH); \r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n\r\n    // Effect to manage state cleanup when switching modes/views\r\n    useEffect(() => {\r\n        // Clear unnecessary fields when switching between views\r\n        if (currentView === VIEW_STATES.AUTH) {\r\n            setPassword('');\r\n            setNewPassword('');\r\n            setConfirmPassword('');\r\n            // Clear all sign-up specific fields regardless of whether we are switching modes or coming from a non-auth view.\r\n            setFullName('');\r\n            setEmail('');\r\n            setPhoneNumber(''); \r\n            setCountry(''); \r\n        }\r\n        \r\n        // Always clear messages when the view or mode changes\r\n        setError('');\r\n        setMessage('');\r\n        \r\n    }, [isSignUp, currentView]); \r\n\r\n    // Helper function to determine CSS class for messages\r\n    const getMessageClass = () => {\r\n        if (error) return 'login-error';\r\n        if (message) return 'login-success';\r\n        return '';\r\n    }\r\n\r\n    /* -------------------------------------------\r\n        --- AUTHENTICATION LOGIC (Login / Sign Up)---\r\n        ------------------------------------------- */\r\n\r\n    const handleAuth = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n        const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\r\n\r\n        const body = isSignUp \r\n            ? JSON.stringify({ \r\n                username, \r\n                password, \r\n                full_name: fullName, \r\n                email,\r\n                phone_number: phoneNumber,\r\n                country: country\r\n            }) \r\n            : JSON.stringify({ username, password });\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: body,\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setPassword('');\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            if (isSignUp) {\r\n                setMessage('Sign-up successful! Please log in now.');\r\n                setIsSignUp(false); // Switch back to login view\r\n            } else if (data.session_token) {\r\n                // Successful login\r\n                onLogin(username, data.session_token); \r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    \r\n    // Toggles between Login and Sign Up forms\r\n    const handleToggleAuth = () => {\r\n        setIsSignUp(!isSignUp);\r\n        setUsername(''); // Clear username on toggle for fresh start\r\n        setError(''); \r\n    }\r\n\r\n    /* -------------------------------------------\r\n        --- PASSWORD RESET LOGIC ---\r\n        ------------------------------------------- */\r\n\r\n    // Step 1: Verify Username\r\n    const handleVerifyUsername = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!username.trim()) {\r\n            setError('Please enter your username.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/verify_username`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                // Displays \"User not found.\" error from backend\r\n                throw new Error(data.error || 'Username verification failed.');\r\n            }\r\n\r\n            // Success! Move to password reset step, keeping username in state\r\n            setMessage(\"Username verified. Set a new password.\");\r\n            setCurrentView(VIEW_STATES.RESET_PASSWORD); \r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    // Step 2: Reset Password\r\n    const handleResetPassword = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!username.trim()) {\r\n            setError('Error: Username state lost. Please restart the process.');\r\n            setCurrentView(VIEW_STATES.AUTH);\r\n            return;\r\n        }\r\n\r\n        if (newPassword.length < 6) {\r\n            setError('New password must be at least 6 characters long.');\r\n            return;\r\n        }\r\n        if (newPassword !== confirmPassword) {\r\n            setError('Passwords do not match.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/reset_password`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, new_password: newPassword }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Password reset failed.');\r\n            }\r\n\r\n            setMessage(data.message);\r\n            \r\n            // Redirect back to login after successful reset\r\n            setTimeout(() => {\r\n                setUsername(''); \r\n                setPassword('');\r\n                setCurrentView(VIEW_STATES.AUTH);\r\n                setMessage('Success! You can now log in with your new password.');\r\n            }, 3000);\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    // Consolidated props object to pass to the AuthForms component\r\n    const formProps = {\r\n        // State\r\n        username, setUsername, \r\n        password, setPassword,\r\n        fullName, setFullName, \r\n        email, setEmail, \r\n        phoneNumber, setPhoneNumber, \r\n        country, setCountry, \r\n        isSignUp, \r\n        newPassword, setNewPassword,\r\n        confirmPassword, setConfirmPassword,\r\n        currentView, setCurrentView,\r\n        VIEW_STATES,\r\n\r\n        // Handlers\r\n        handleAuth, \r\n        handleVerifyUsername, \r\n        handleResetPassword,\r\n        handleToggleAuth,\r\n\r\n        // UI Helpers\r\n        title: isSignUp ? 'Sign Up' : 'Log In',\r\n        error, message, getMessageClass\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-card\">\r\n                <AuthForms {...formProps} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,OAAOC,SAAS,MAAM,SAAS,CAAC,CAAC;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,WAAW,GAAG;EAChBC,IAAI,EAAE,MAAM;EAAE;EACdC,eAAe,EAAE,iBAAiB;EAAE;EACpCC,cAAc,EAAE,gBAAgB,CAAE;AACtC,CAAC;AAED,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC3B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC2B,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC6B,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC+B,WAAW,EAAEC,cAAc,CAAC,GAAGhC,QAAQ,CAACM,WAAW,CAACC,IAAI,CAAC;EAChE,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAGlC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACmC,eAAe,EAAEC,kBAAkB,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;;EAG1D;EACAC,SAAS,CAAC,MAAM;IACZ;IACA,IAAI8B,WAAW,KAAKzB,WAAW,CAACC,IAAI,EAAE;MAClCS,WAAW,CAAC,EAAE,CAAC;MACfkB,cAAc,CAAC,EAAE,CAAC;MAClBE,kBAAkB,CAAC,EAAE,CAAC;MACtB;MACAlB,WAAW,CAAC,EAAE,CAAC;MACfE,QAAQ,CAAC,EAAE,CAAC;MACZE,cAAc,CAAC,EAAE,CAAC;MAClBE,UAAU,CAAC,EAAE,CAAC;IAClB;;IAEA;IACAI,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;EAElB,CAAC,EAAE,CAACL,QAAQ,EAAEM,WAAW,CAAC,CAAC;;EAE3B;EACA,MAAMM,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIV,KAAK,EAAE,OAAO,aAAa;IAC/B,IAAIE,OAAO,EAAE,OAAO,eAAe;IACnC,OAAO,EAAE;EACb,CAAC;;EAED;AACJ;AACA;;EAEI,MAAMS,UAAU,GAAG,MAAOC,CAAC,IAAK;IAC5BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBZ,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IACd,MAAMW,GAAG,GAAGhB,QAAQ,GAAG,GAAGpB,YAAY,SAAS,GAAG,GAAGA,YAAY,QAAQ;IAEzE,MAAMqC,IAAI,GAAGjB,QAAQ,GACfkB,IAAI,CAACC,SAAS,CAAC;MACb/B,QAAQ;MACRE,QAAQ;MACR8B,SAAS,EAAE5B,QAAQ;MACnBE,KAAK;MACL2B,YAAY,EAAEzB,WAAW;MACzBE,OAAO,EAAEA;IACb,CAAC,CAAC,GACAoB,IAAI,CAACC,SAAS,CAAC;MAAE/B,QAAQ;MAAEE;IAAS,CAAC,CAAC;IAE5C,IAAI;MACA,MAAMgC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;QAC9BQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CR,IAAI,EAAEA;MACV,CAAC,CAAC;MAEF,MAAMS,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QACdrC,WAAW,CAAC,EAAE,CAAC;QACf,MAAM,IAAIsC,KAAK,CAACH,IAAI,CAACxB,KAAK,IAAI,wBAAwB,CAAC;MAC3D;MAEA,IAAIF,QAAQ,EAAE;QACVK,UAAU,CAAC,wCAAwC,CAAC;QACpDJ,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,MAAM,IAAIyB,IAAI,CAACI,aAAa,EAAE;QAC3B;QACA5C,OAAO,CAACE,QAAQ,EAAEsC,IAAI,CAACI,aAAa,CAAC;MACzC;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACV5B,QAAQ,CAAC4B,GAAG,CAAC3B,OAAO,CAAC;IACzB;EACJ,CAAC;;EAED;EACA,MAAM4B,gBAAgB,GAAGA,CAAA,KAAM;IAC3B/B,WAAW,CAAC,CAACD,QAAQ,CAAC;IACtBX,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACjBc,QAAQ,CAAC,EAAE,CAAC;EAChB,CAAC;;EAED;AACJ;AACA;;EAEI;EACA,MAAM8B,oBAAoB,GAAG,MAAOnB,CAAC,IAAK;IACtCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBZ,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI,CAACjB,QAAQ,CAAC8C,IAAI,CAAC,CAAC,EAAE;MAClB/B,QAAQ,CAAC,6BAA6B,CAAC;MACvC;IACJ;IAEA,IAAI;MACA,MAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,YAAY,kBAAkB,EAAE;QAC5D4C,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CR,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE/B;QAAS,CAAC;MACrC,CAAC,CAAC;MAEF,MAAMsC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QACd;QACA,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACxB,KAAK,IAAI,+BAA+B,CAAC;MAClE;;MAEA;MACAG,UAAU,CAAC,wCAAwC,CAAC;MACpDE,cAAc,CAAC1B,WAAW,CAACG,cAAc,CAAC;IAE9C,CAAC,CAAC,OAAO+C,GAAG,EAAE;MACV5B,QAAQ,CAAC4B,GAAG,CAAC3B,OAAO,CAAC;IACzB;EACJ,CAAC;;EAED;EACA,MAAM+B,mBAAmB,GAAG,MAAOrB,CAAC,IAAK;IACrCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBZ,QAAQ,CAAC,EAAE,CAAC;IACZE,UAAU,CAAC,EAAE,CAAC;IAEd,IAAI,CAACjB,QAAQ,CAAC8C,IAAI,CAAC,CAAC,EAAE;MAClB/B,QAAQ,CAAC,yDAAyD,CAAC;MACnEI,cAAc,CAAC1B,WAAW,CAACC,IAAI,CAAC;MAChC;IACJ;IAEA,IAAI0B,WAAW,CAAC4B,MAAM,GAAG,CAAC,EAAE;MACxBjC,QAAQ,CAAC,kDAAkD,CAAC;MAC5D;IACJ;IACA,IAAIK,WAAW,KAAKE,eAAe,EAAE;MACjCP,QAAQ,CAAC,yBAAyB,CAAC;MACnC;IACJ;IAEA,IAAI;MACA,MAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG3C,YAAY,iBAAiB,EAAE;QAC3D4C,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CR,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE/B,QAAQ;UAAEiD,YAAY,EAAE7B;QAAY,CAAC;MAChE,CAAC,CAAC;MAEF,MAAMkB,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACxB,KAAK,IAAI,wBAAwB,CAAC;MAC3D;MAEAG,UAAU,CAACqB,IAAI,CAACtB,OAAO,CAAC;;MAExB;MACAkC,UAAU,CAAC,MAAM;QACbjD,WAAW,CAAC,EAAE,CAAC;QACfE,WAAW,CAAC,EAAE,CAAC;QACfgB,cAAc,CAAC1B,WAAW,CAACC,IAAI,CAAC;QAChCuB,UAAU,CAAC,qDAAqD,CAAC;MACrE,CAAC,EAAE,IAAI,CAAC;IAEZ,CAAC,CAAC,OAAO0B,GAAG,EAAE;MACV5B,QAAQ,CAAC4B,GAAG,CAAC3B,OAAO,CAAC;IACzB;EACJ,CAAC;;EAED;EACA,MAAMmC,SAAS,GAAG;IACd;IACAnD,QAAQ;IAAEC,WAAW;IACrBC,QAAQ;IAAEC,WAAW;IACrBC,QAAQ;IAAEC,WAAW;IACrBC,KAAK;IAAEC,QAAQ;IACfC,WAAW;IAAEC,cAAc;IAC3BC,OAAO;IAAEC,UAAU;IACnBC,QAAQ;IACRQ,WAAW;IAAEC,cAAc;IAC3BC,eAAe;IAAEC,kBAAkB;IACnCL,WAAW;IAAEC,cAAc;IAC3B1B,WAAW;IAEX;IACAgC,UAAU;IACVoB,oBAAoB;IACpBE,mBAAmB;IACnBH,gBAAgB;IAEhB;IACAQ,KAAK,EAAExC,QAAQ,GAAG,SAAS,GAAG,QAAQ;IACtCE,KAAK;IAAEE,OAAO;IAAEQ;EACpB,CAAC;EAGD,oBACIjC,OAAA;IAAK8D,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC5B/D,OAAA;MAAK8D,SAAS,EAAC,YAAY;MAAAC,QAAA,eACvB/D,OAAA,CAACF,SAAS;QAAA,GAAK8D;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC3D,EAAA,CA5NIF,KAAK;AAAA8D,EAAA,GAAL9D,KAAK;AA8NX,eAAeA,KAAK;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}