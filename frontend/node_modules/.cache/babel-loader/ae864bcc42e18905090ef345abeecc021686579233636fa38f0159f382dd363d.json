{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\ChatPage\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatPage.css'; // Make sure the dark theme CSS is applied here\nimport UploadButton from '../UploadButton/UploadButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst ChatPage = ({\n  user,\n  sessionToken,\n  onSignOut\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const chatEndRef = useRef(null);\n\n  // Scroll to the bottom of the chat area when messages change\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Fetch chat history on component mount\n  useEffect(() => {\n    fetchChatHistory();\n  }, [sessionToken]);\n  const fetchChatHistory = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat_history`, {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n      if (response.status === 401) {\n        onSignOut(); // Automatically sign out if token is invalid/expired\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch history.\");\n      }\n      const data = await response.json();\n      if (data.history) {\n        setMessages(data.history);\n      }\n    } catch (err) {\n      console.error(\"Error fetching chat history:\", err);\n      // Don't show critical error for history, just log it.\n    }\n  };\n  const handleFileUpload = async file => {\n    if (isLoading) return;\n    setIsLoading(true);\n    setError('');\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Add initial bot message for immediate feedback\n    const tempBotMessage = {\n      sender: 'bot',\n      text: `Processing file: ${file.name}... Please wait.`,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, tempBotMessage]);\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n          // Note: Do NOT set 'Content-Type': 'application/json' when using FormData\n        },\n        body: formData\n      });\n      const data = await response.json();\n\n      // Replace the temporary bot message with the final response\n      setMessages(prev => {\n        const updated = [...prev];\n        updated.pop(); // Remove the temporary message\n        if (response.ok) {\n          updated.push({\n            sender: 'bot',\n            text: data.message,\n            timestamp: new Date().toISOString()\n          });\n        } else {\n          updated.push({\n            sender: 'bot',\n            text: `Upload Error: ${data.error || 'Unknown issue.'}`,\n            timestamp: new Date().toISOString()\n          });\n        }\n        return updated;\n      });\n    } catch (err) {\n      console.error(\"Upload error:\", err);\n      setMessages(prev => {\n        const updated = [...prev];\n        updated.pop(); // Remove temporary message\n        updated.push({\n          sender: 'bot',\n          text: 'Critical Network Error: Could not reach the server.',\n          timestamp: new Date().toISOString()\n        });\n        return updated;\n      });\n      setError('File upload failed. Check server status.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim() || isLoading) return;\n    const userMessage = {\n      sender: 'user',\n      text: input.trim(),\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    setError('');\n\n    // Add a temporary 'thinking' message\n    const thinkingMessage = {\n      sender: 'bot',\n      text: 'Thinking...',\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, thinkingMessage]);\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: JSON.stringify({\n          query: userMessage.text\n        })\n      });\n      const data = await response.json();\n\n      // Replace 'thinking' message with the final answer\n      setMessages(prev => {\n        const updated = [...prev];\n        updated.pop(); // Remove the 'thinking' message\n        if (response.ok) {\n          updated.push({\n            sender: 'bot',\n            text: data.answer,\n            timestamp: new Date().toISOString()\n          });\n        } else {\n          updated.push({\n            sender: 'bot',\n            text: `LLM Error: ${data.error || 'An unexpected error occurred.'}`,\n            timestamp: new Date().toISOString()\n          });\n        }\n        return updated;\n      });\n    } catch (err) {\n      console.error(\"Chat error:\", err);\n      setMessages(prev => {\n        const updated = [...prev];\n        updated.pop(); // Remove the 'thinking' message\n        updated.push({\n          sender: 'bot',\n          text: 'Critical Network Error: Could not send message to server.',\n          timestamp: new Date().toISOString()\n        });\n        return updated;\n      });\n      setError('Failed to get a response from the server.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper component for message rendering\n  const MessageComponent = ({\n    msg\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${msg.sender === 'user' ? 'user-message' : 'bot-message'}`,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message-text\",\n      children: msg.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n\n  // --- Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"chat-title\",\n          children: \"Timesheet Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"user-info\",\n            children: [\"Logged in as: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 67\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onSignOut,\n            className: \"sign-out-button\",\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(MessageComponent, {\n          msg: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this)), error && /*#__PURE__*/_jsxDEV(MessageComponent, {\n          msg: {\n            sender: 'bot',\n            text: `System Alert: ${error}`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-form\",\n        children: [/*#__PURE__*/_jsxDEV(UploadButton, {\n          onFileUpload: handleFileUpload,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSendMessage,\n          className: \"chat-input-form-inner\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: isLoading ? \"Processing, please wait...\" : \"Ask a question about the timesheet...\",\n            className: \"chat-input\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            disabled: isLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"send-button\",\n            disabled: !input.trim() || isLoading,\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              strokeWidth: \"2\",\n              stroke: \"currentColor\",\n              className: \"send-icon\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                d: \"M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 0 013.27 20.876L5.999 12zm0 0h7.5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"XAHF3kH7F7haVWZr6phcRhnMPo8=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","UploadButton","jsxDEV","_jsxDEV","API_BASE_URL","ChatPage","user","sessionToken","onSignOut","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","error","setError","chatEndRef","_chatEndRef$current","current","scrollIntoView","behavior","fetchChatHistory","response","fetch","headers","status","ok","Error","data","json","history","err","console","handleFileUpload","file","formData","FormData","append","tempBotMessage","sender","text","name","timestamp","Date","toISOString","prev","method","body","updated","pop","push","message","handleSendMessage","e","preventDefault","trim","userMessage","thinkingMessage","JSON","stringify","query","answer","MessageComponent","msg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","ref","onFileUpload","disabled","onSubmit","type","placeholder","value","onChange","target","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/ChatPage/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatPage.css'; // Make sure the dark theme CSS is applied here\r\nimport UploadButton from '../UploadButton/UploadButton'; \r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst ChatPage = ({ user, sessionToken, onSignOut }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const chatEndRef = useRef(null);\r\n\r\n    // Scroll to the bottom of the chat area when messages change\r\n    useEffect(() => {\r\n        chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // Fetch chat history on component mount\r\n    useEffect(() => {\r\n        fetchChatHistory();\r\n    }, [sessionToken]);\r\n\r\n    const fetchChatHistory = async () => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat_history`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut(); // Automatically sign out if token is invalid/expired\r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to fetch history.\");\r\n            }\r\n\r\n            const data = await response.json();\r\n            if (data.history) {\r\n                setMessages(data.history);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error fetching chat history:\", err);\r\n            // Don't show critical error for history, just log it.\r\n        }\r\n    };\r\n\r\n    const handleFileUpload = async (file) => {\r\n        if (isLoading) return;\r\n        setIsLoading(true);\r\n        setError('');\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        // Add initial bot message for immediate feedback\r\n        const tempBotMessage = {\r\n            sender: 'bot', \r\n            text: `Processing file: ${file.name}... Please wait.`, \r\n            timestamp: new Date().toISOString()\r\n        };\r\n        setMessages(prev => [...prev, tempBotMessage]);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/upload`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                    // Note: Do NOT set 'Content-Type': 'application/json' when using FormData\r\n                },\r\n                body: formData\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            // Replace the temporary bot message with the final response\r\n            setMessages(prev => {\r\n                const updated = [...prev];\r\n                updated.pop(); // Remove the temporary message\r\n                if (response.ok) {\r\n                    updated.push({ sender: 'bot', text: data.message, timestamp: new Date().toISOString() });\r\n                } else {\r\n                    updated.push({ sender: 'bot', text: `Upload Error: ${data.error || 'Unknown issue.'}`, timestamp: new Date().toISOString() });\r\n                }\r\n                return updated;\r\n            });\r\n\r\n        } catch (err) {\r\n            console.error(\"Upload error:\", err);\r\n            setMessages(prev => {\r\n                const updated = [...prev];\r\n                updated.pop(); // Remove temporary message\r\n                updated.push({ sender: 'bot', text: 'Critical Network Error: Could not reach the server.', timestamp: new Date().toISOString() });\r\n                return updated;\r\n            });\r\n            setError('File upload failed. Check server status.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if (!input.trim() || isLoading) return;\r\n\r\n        const userMessage = { sender: 'user', text: input.trim(), timestamp: new Date().toISOString() };\r\n        setMessages(prev => [...prev, userMessage]);\r\n        setInput('');\r\n        setIsLoading(true);\r\n        setError('');\r\n        \r\n        // Add a temporary 'thinking' message\r\n        const thinkingMessage = { sender: 'bot', text: 'Thinking...', timestamp: new Date().toISOString() };\r\n        setMessages(prev => [...prev, thinkingMessage]);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                },\r\n                body: JSON.stringify({ query: userMessage.text })\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            // Replace 'thinking' message with the final answer\r\n            setMessages(prev => {\r\n                const updated = [...prev];\r\n                updated.pop(); // Remove the 'thinking' message\r\n                if (response.ok) {\r\n                    updated.push({ sender: 'bot', text: data.answer, timestamp: new Date().toISOString() });\r\n                } else {\r\n                    updated.push({ sender: 'bot', text: `LLM Error: ${data.error || 'An unexpected error occurred.'}`, timestamp: new Date().toISOString() });\r\n                }\r\n                return updated;\r\n            });\r\n\r\n        } catch (err) {\r\n            console.error(\"Chat error:\", err);\r\n            setMessages(prev => {\r\n                const updated = [...prev];\r\n                updated.pop(); // Remove the 'thinking' message\r\n                updated.push({ sender: 'bot', text: 'Critical Network Error: Could not send message to server.', timestamp: new Date().toISOString() });\r\n                return updated;\r\n            });\r\n            setError('Failed to get a response from the server.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Helper component for message rendering\r\n    const MessageComponent = ({ msg }) => (\r\n        <div className={`message ${msg.sender === 'user' ? 'user-message' : 'bot-message'}`}>\r\n            <p className=\"message-text\">{msg.text}</p>\r\n        </div>\r\n    );\r\n\r\n    // --- Render ---\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-card\">\r\n                <header className=\"chat-header\">\r\n                    <h1 className=\"chat-title\">Timesheet Chatbot</h1>\r\n                    <div className=\"flex items-center space-x-4\">\r\n                        <span className=\"user-info\">Logged in as: <strong>{user}</strong></span>\r\n                        <button onClick={onSignOut} className=\"sign-out-button\">Sign Out</button>\r\n                    </div>\r\n                </header>\r\n\r\n                <div className=\"chat-messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <MessageComponent key={index} msg={msg} />\r\n                    ))}\r\n                    {/* Optional error message display */}\r\n                    {error && <MessageComponent msg={{ sender: 'bot', text: `System Alert: ${error}` }} />}\r\n                    <div ref={chatEndRef} />\r\n                </div>\r\n                \r\n                {/* CRITICAL: Input form structure for alignment */}\r\n                <div className=\"chat-input-form\">\r\n                    <UploadButton onFileUpload={handleFileUpload} disabled={isLoading} />\r\n                    \r\n                    {/* The inner form uses flex-grow: 1 to fill the remaining space */}\r\n                    <form onSubmit={handleSendMessage} className=\"chat-input-form-inner\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder={isLoading ? \"Processing, please wait...\" : \"Ask a question about the timesheet...\"}\r\n                            className=\"chat-input\"\r\n                            value={input}\r\n                            onChange={(e) => setInput(e.target.value)}\r\n                            disabled={isLoading}\r\n                        />\r\n                        <button type=\"submit\" className=\"send-button\" disabled={!input.trim() || isLoading}>\r\n                            {/* SVG icon for send button */}\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"send-icon\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 0 013.27 20.876L5.999 12zm0 0h7.5\" />\r\n                            </svg>\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}