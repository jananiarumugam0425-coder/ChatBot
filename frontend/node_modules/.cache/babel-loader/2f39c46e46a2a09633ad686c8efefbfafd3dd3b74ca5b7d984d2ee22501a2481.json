{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\ForgotPassword\\\\ForgotPassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ForgotPasswordView from './ForgotPasswordView';\nimport './ForgotPassword.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst ForgotPassword = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    email: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n  const [step, setStep] = useState(1); // 1: email verification, 2: password reset\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [verifiedEmail, setVerifiedEmail] = useState('');\n  const navigate = useNavigate();\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleEmailVerification = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!formData.email) {\n      setError('Please enter your email address.');\n      return;\n    }\n\n    // Basic email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(formData.email)) {\n      setError('Please enter a valid email address.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      console.log('Verifying email with backend:', formData.email);\n      const response = await fetch(`${API_BASE_URL}/forgot-password/verify-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: formData.email\n        })\n      });\n      const data = await response.json();\n      console.log('Email verification response:', data);\n      if (!response.ok) {\n        throw new Error(data.error || 'Email verification failed.');\n      }\n      setVerifiedEmail(formData.email);\n      setMessage('Email verified successfully! You can now set your new password.');\n      setStep(2);\n    } catch (err) {\n      console.error('Email verification error:', err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handlePasswordReset = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!formData.newPassword || !formData.confirmPassword) {\n      setError('Please fill in all password fields.');\n      return;\n    }\n    if (formData.newPassword.length < 6) {\n      setError('Password must be at least 6 characters long.');\n      return;\n    }\n    if (formData.newPassword !== formData.confirmPassword) {\n      setError('Passwords do not match. Please try again.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      console.log('Resetting password for email:', verifiedEmail);\n      const response = await fetch(`${API_BASE_URL}/forgot-password/reset`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: verifiedEmail,\n          new_password: formData.newPassword\n        })\n      });\n      const data = await response.json();\n      console.log('Password reset response:', data);\n      if (!response.ok) {\n        throw new Error(data.error || 'Password reset failed. Please try again.');\n      }\n      setMessage('Password reset successfully! Redirecting to login...');\n\n      // Reset form\n      setFormData({\n        email: '',\n        newPassword: '',\n        confirmPassword: ''\n      });\n\n      // Redirect to login after delay\n      setTimeout(() => {\n        navigate('/login', {\n          state: {\n            message: 'Password reset successfully! Please log in with your new password.'\n          }\n        });\n      }, 2000);\n    } catch (err) {\n      console.error('Password reset error:', err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleBackToEmail = () => {\n    setStep(1);\n    setError('');\n    setMessage('');\n    setFormData(prev => ({\n      ...prev,\n      newPassword: '',\n      confirmPassword: ''\n    }));\n  };\n\n  // Props to pass to ForgotPasswordView\n  const viewProps = {\n    formData,\n    step,\n    error,\n    message,\n    isLoading,\n    verifiedEmail,\n    handleChange,\n    handleEmailVerification,\n    handlePasswordReset,\n    handleBackToEmail\n  };\n  return /*#__PURE__*/_jsxDEV(ForgotPasswordView, {\n    ...viewProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 12\n  }, this);\n};\n_s(ForgotPassword, \"WhJnqaFFcxI3OcFriCGdo5UVYEY=\", false, function () {\n  return [useNavigate];\n});\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useState","useNavigate","ForgotPasswordView","jsxDEV","_jsxDEV","API_BASE_URL","ForgotPassword","_s","formData","setFormData","email","newPassword","confirmPassword","step","setStep","error","setError","message","setMessage","isLoading","setIsLoading","verifiedEmail","setVerifiedEmail","navigate","handleChange","e","name","value","target","prevState","handleEmailVerification","preventDefault","emailRegex","test","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","err","handlePasswordReset","length","new_password","setTimeout","state","handleBackToEmail","prev","viewProps","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/ForgotPassword/ForgotPassword.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ForgotPasswordView from './ForgotPasswordView';\r\nimport './ForgotPassword.css';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst ForgotPassword = () => {\r\n    const [formData, setFormData] = useState({\r\n        email: '',\r\n        newPassword: '',\r\n        confirmPassword: ''\r\n    });\r\n    const [step, setStep] = useState(1); // 1: email verification, 2: password reset\r\n    const [error, setError] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [verifiedEmail, setVerifiedEmail] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const handleEmailVerification = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!formData.email) {\r\n            setError('Please enter your email address.');\r\n            return;\r\n        }\r\n\r\n        // Basic email validation\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(formData.email)) {\r\n            setError('Please enter a valid email address.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            console.log('Verifying email with backend:', formData.email);\r\n            \r\n            const response = await fetch(`${API_BASE_URL}/forgot-password/verify-email`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email: formData.email }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('Email verification response:', data);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Email verification failed.');\r\n            }\r\n\r\n            setVerifiedEmail(formData.email);\r\n            setMessage('Email verified successfully! You can now set your new password.');\r\n            setStep(2);\r\n\r\n        } catch (err) {\r\n            console.error('Email verification error:', err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handlePasswordReset = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!formData.newPassword || !formData.confirmPassword) {\r\n            setError('Please fill in all password fields.');\r\n            return;\r\n        }\r\n\r\n        if (formData.newPassword.length < 6) {\r\n            setError('Password must be at least 6 characters long.');\r\n            return;\r\n        }\r\n\r\n        if (formData.newPassword !== formData.confirmPassword) {\r\n            setError('Passwords do not match. Please try again.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            console.log('Resetting password for email:', verifiedEmail);\r\n            \r\n            const response = await fetch(`${API_BASE_URL}/forgot-password/reset`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ \r\n                    email: verifiedEmail,\r\n                    new_password: formData.newPassword \r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('Password reset response:', data);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Password reset failed. Please try again.');\r\n            }\r\n\r\n            setMessage('Password reset successfully! Redirecting to login...');\r\n            \r\n            // Reset form\r\n            setFormData({\r\n                email: '',\r\n                newPassword: '',\r\n                confirmPassword: ''\r\n            });\r\n            \r\n            // Redirect to login after delay\r\n            setTimeout(() => {\r\n                navigate('/login', { \r\n                    state: { \r\n                        message: 'Password reset successfully! Please log in with your new password.' \r\n                    } \r\n                });\r\n            }, 2000);\r\n\r\n        } catch (err) {\r\n            console.error('Password reset error:', err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleBackToEmail = () => {\r\n        setStep(1);\r\n        setError('');\r\n        setMessage('');\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            newPassword: '',\r\n            confirmPassword: ''\r\n        }));\r\n    };\r\n\r\n    // Props to pass to ForgotPasswordView\r\n    const viewProps = {\r\n        formData,\r\n        step,\r\n        error,\r\n        message,\r\n        isLoading,\r\n        verifiedEmail,\r\n        handleChange,\r\n        handleEmailVerification,\r\n        handlePasswordReset,\r\n        handleBackToEmail\r\n    };\r\n\r\n    return <ForgotPasswordView {...viewProps} />;\r\n};\r\n\r\nexport default ForgotPassword;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}