{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Login\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  // State for login/signup credentials\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n\n  // State for additional sign-up fields\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState(''); // NEW FIELD\n  const [country, setCountry] = useState(''); // NEW FIELD\n\n  // UI State\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [resetStage, setResetStage] = useState(0);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Clears fields when component mounts or authentication mode changes\n  // This is necessary even with autocomplete=\"off\" for clean state management.\n  useEffect(() => {\n    setUsername('');\n    setPassword('');\n    setNewPassword('');\n    setEmail('');\n    setFullName('');\n    setPhoneNumber(''); // Clear phone number\n    setCountry(''); // Clear country\n    setError('');\n    setSuccessMessage('');\n  }, [isSignUp, resetStage]);\n\n  // Helper to determine CSS class for messages\n  const getMessageClass = () => {\n    if (error) return 'login-error';\n    if (successMessage) return 'login-success';\n    return '';\n  };\n  const handleAuth = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\n\n    // Update body to include new fields for Sign Up\n    const body = isSignUp ? JSON.stringify({\n      username,\n      password,\n      full_name: fullName,\n      email,\n      phone_number: phoneNumber,\n      // ADDED\n      country: country // ADDED\n    }) : JSON.stringify({\n      username,\n      password\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setPassword('');\n        throw new Error(data.error || 'Authentication failed.');\n      }\n      if (data.token) {\n        onLogin(data.token, username);\n      } else {\n        setSuccessMessage(data.message || 'Account created successfully! Please log in.');\n        setIsSignUp(false);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const handleUsernameCheck = e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    if (!username.trim()) {\n      setError(\"Please enter your username.\");\n      return;\n    }\n    setResetStage(2);\n    setSuccessMessage(`Change password for ${username}.`);\n  };\n  const handleChangePassword = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    if (!newPassword.trim() || newPassword.length < 6) {\n      setError(\"New password must be at least 6 characters.\");\n      return;\n    }\n\n    // --- Mocked API Call for Prototype ---\n    setTimeout(() => {\n      setSuccessMessage(`Password for ${username} has been successfully updated!`);\n      setResetStage(0);\n      setNewPassword('');\n    }, 1500);\n  };\n  const handleToggleAuth = () => {\n    setIsSignUp(prev => !prev);\n    setResetStage(0);\n  };\n  const handleOpenResetFlow = () => {\n    setResetStage(1);\n  };\n  const handleBackToLogin = () => {\n    setResetStage(0);\n  };\n  let formHandler = handleAuth;\n  if (resetStage === 1) {\n    formHandler = handleUsernameCheck;\n  } else if (resetStage === 2) {\n    formHandler = handleChangePassword;\n  }\n\n  // Function to check if all Sign Up fields are filled\n  const isSignUpDisabled = !username.trim() || !password.trim() || !fullName.trim() || !email.trim() || !phoneNumber.trim() || !country.trim();\n\n  // --- Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"login-title\",\n        children: resetStage === 1 ? 'Verify Username' : resetStage === 2 ? 'New Password' : isSignUp ? 'Sign Up' : 'Log In'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formHandler,\n        className: \"login-form\",\n        autoComplete: \"off\",\n        children: [isSignUp && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Full Name\",\n            value: fullName,\n            onChange: e => setFullName(e.target.value),\n            className: \"login-input\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            className: \"login-input\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"tel\",\n            placeholder: \"Phone Number\",\n            value: phoneNumber,\n            onChange: e => setPhoneNumber(e.target.value),\n            className: \"login-input\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Country\",\n            value: country,\n            onChange: e => setCountry(e.target.value),\n            className: \"login-input\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), !isSignUp && resetStage < 2 || isSignUp ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this) : null, !isSignUp && resetStage === 0 || isSignUp ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"login-input\",\n          required: true,\n          autoComplete: isSignUp ? \"new-password\" : \"current-password\" // Suggests new password for Sign Up\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 25\n        }, this) : null, resetStage === 2 && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Enter New Password\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value),\n          className: \"login-input\",\n          required: true,\n          autoComplete: \"new-password\" // Prevents auto-fill from saving old password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 26\n        }, this), !isSignUp && resetStage === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleOpenResetFlow,\n          className: \"forgot-password-button\",\n          children: \"Forgot Password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 26\n        }, this), (error || successMessage) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: getMessageClass(),\n          children: error || successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\"\n          // Updated disabled check for Sign Up\n          ,\n          disabled: resetStage === 1 && !username.trim() || resetStage === 2 && !newPassword.trim() || !isSignUp && resetStage === 0 && (!username.trim() || !password.trim()) || isSignUp && isSignUpDisabled // Use the helper check\n          ,\n          children: resetStage === 1 ? 'Verify' : resetStage === 2 ? 'Change Password' : isSignUp ? 'Sign Up' : 'Log In'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), resetStage === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleAuth,\n        className: \"toggle-auth-button\",\n        children: isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }, this), resetStage > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToLogin,\n        className: \"toggle-auth-button\",\n        children: \"Back to Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"OyIXEWdqIGlcXUu0lYZmPuKfUr4=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","Login","onLogin","_s","username","setUsername","password","setPassword","newPassword","setNewPassword","fullName","setFullName","email","setEmail","phoneNumber","setPhoneNumber","country","setCountry","isSignUp","setIsSignUp","resetStage","setResetStage","error","setError","successMessage","setSuccessMessage","getMessageClass","handleAuth","e","preventDefault","url","body","JSON","stringify","full_name","phone_number","response","fetch","method","headers","data","json","ok","Error","token","message","err","handleUsernameCheck","trim","handleChangePassword","length","setTimeout","handleToggleAuth","prev","handleOpenResetFlow","handleBackToLogin","formHandler","isSignUpDisabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","autoComplete","type","placeholder","value","onChange","target","required","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Login/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Login.css';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000'; \r\n\r\nconst Login = ({ onLogin }) => {\r\n    // State for login/signup credentials\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [newPassword, setNewPassword] = useState(''); \r\n    \r\n    // State for additional sign-up fields\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState(''); // NEW FIELD\r\n    const [country, setCountry] = useState('');         // NEW FIELD\r\n    \r\n    // UI State\r\n    const [isSignUp, setIsSignUp] = useState(false);\r\n    const [resetStage, setResetStage] = useState(0); \r\n    const [error, setError] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    // Clears fields when component mounts or authentication mode changes\r\n    // This is necessary even with autocomplete=\"off\" for clean state management.\r\n    useEffect(() => {\r\n        setUsername('');\r\n        setPassword('');\r\n        setNewPassword(''); \r\n        setEmail('');\r\n        setFullName('');\r\n        setPhoneNumber(''); // Clear phone number\r\n        setCountry('');     // Clear country\r\n        setError('');\r\n        setSuccessMessage('');\r\n    }, [isSignUp, resetStage]); \r\n\r\n    // Helper to determine CSS class for messages\r\n    const getMessageClass = () => {\r\n        if (error) return 'login-error';\r\n        if (successMessage) return 'login-success';\r\n        return '';\r\n    };\r\n\r\n    const handleAuth = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n        \r\n        const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\r\n\r\n        // Update body to include new fields for Sign Up\r\n        const body = isSignUp \r\n            ? JSON.stringify({ \r\n                username, \r\n                password, \r\n                full_name: fullName, \r\n                email,\r\n                phone_number: phoneNumber, // ADDED\r\n                country: country          // ADDED\r\n              }) \r\n            : JSON.stringify({ username, password });\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: body,\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setPassword('');\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            if (data.token) {\r\n                onLogin(data.token, username);\r\n            } else {\r\n                setSuccessMessage(data.message || 'Account created successfully! Please log in.');\r\n                setIsSignUp(false);\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    \r\n    const handleUsernameCheck = (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n\r\n        if (!username.trim()) {\r\n            setError(\"Please enter your username.\");\r\n            return;\r\n        }\r\n        \r\n        setResetStage(2); \r\n        setSuccessMessage(`Change password for ${username}.`);\r\n    };\r\n\r\n    const handleChangePassword = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n\r\n        if (!newPassword.trim() || newPassword.length < 6) {\r\n            setError(\"New password must be at least 6 characters.\");\r\n            return;\r\n        }\r\n\r\n        // --- Mocked API Call for Prototype ---\r\n        setTimeout(() => {\r\n            setSuccessMessage(`Password for ${username} has been successfully updated!`);\r\n            setResetStage(0); \r\n            setNewPassword('');\r\n        }, 1500);\r\n    };\r\n\r\n    const handleToggleAuth = () => {\r\n        setIsSignUp(prev => !prev);\r\n        setResetStage(0); \r\n    };\r\n    \r\n    const handleOpenResetFlow = () => {\r\n        setResetStage(1); \r\n    };\r\n\r\n    const handleBackToLogin = () => {\r\n        setResetStage(0);\r\n    };\r\n    \r\n    let formHandler = handleAuth;\r\n    if (resetStage === 1) {\r\n        formHandler = handleUsernameCheck;\r\n    } else if (resetStage === 2) {\r\n        formHandler = handleChangePassword;\r\n    }\r\n    \r\n    // Function to check if all Sign Up fields are filled\r\n    const isSignUpDisabled = !username.trim() || !password.trim() || !fullName.trim() || !email.trim() || !phoneNumber.trim() || !country.trim();\r\n\r\n    // --- Render ---\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-card\">\r\n                <h1 className=\"login-title\">\r\n                    {resetStage === 1 ? 'Verify Username' : (resetStage === 2 ? 'New Password' : (isSignUp ? 'Sign Up' : 'Log In'))}\r\n                </h1>\r\n\r\n                {/* ADDED: autoComplete=\"off\" to prevent form-wide credential saving */}\r\n                <form onSubmit={formHandler} className=\"login-form\" autoComplete=\"off\">\r\n                    \r\n                    {/* Sign Up Fields (Full Name, Email, Phone, Country) */}\r\n                    {isSignUp && (\r\n                         <>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Full Name\"\r\n                                value={fullName}\r\n                                onChange={(e) => setFullName(e.target.value)}\r\n                                className=\"login-input\"\r\n                                required\r\n                            />\r\n                             <input\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                className=\"login-input\"\r\n                                required\r\n                            />\r\n                            {/* NEW: Phone Number Input */}\r\n                            <input\r\n                                type=\"tel\" \r\n                                placeholder=\"Phone Number\"\r\n                                value={phoneNumber}\r\n                                onChange={(e) => setPhoneNumber(e.target.value)}\r\n                                className=\"login-input\"\r\n                                required\r\n                            />\r\n                            {/* NEW: Country Input */}\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Country\"\r\n                                value={country}\r\n                                onChange={(e) => setCountry(e.target.value)}\r\n                                className=\"login-input\"\r\n                                required\r\n                            />\r\n                        </>\r\n                    )}\r\n                    \r\n                    {/* Username Input - Used in Login, Sign Up, and Reset Stage 1 */}\r\n                    {(!isSignUp && resetStage < 2) || isSignUp ? (\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Username\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            className=\"login-input\"\r\n                            required\r\n                        />\r\n                    ) : null}\r\n\r\n                    {/* Password Input - Used in Login/Sign Up */}\r\n                    {(!isSignUp && resetStage === 0) || isSignUp ? (\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            className=\"login-input\"\r\n                            required\r\n                            autoComplete={isSignUp ? \"new-password\" : \"current-password\"} // Suggests new password for Sign Up\r\n                        />\r\n                    ) : null}\r\n\r\n                    {/* New Password Input - Used in Reset Stage 2 */}\r\n                    {resetStage === 2 && (\r\n                         <input\r\n                            type=\"password\"\r\n                            placeholder=\"Enter New Password\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            className=\"login-input\"\r\n                            required\r\n                            autoComplete=\"new-password\" // Prevents auto-fill from saving old password\r\n                        />\r\n                    )}\r\n                    \r\n                    {/* --- Forgot Password Button --- */}\r\n                    {(!isSignUp && resetStage === 0) && (\r\n                         <button type=\"button\" onClick={handleOpenResetFlow} className=\"forgot-password-button\">\r\n                            Forgot Password?\r\n                         </button>\r\n                    )}\r\n                    \r\n                    {/* Error/Success Message */}\r\n                    {(error || successMessage) && (\r\n                        <div className={getMessageClass()}>\r\n                            {error || successMessage}\r\n                        </div>\r\n                    )}\r\n                    \r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"login-button\"\r\n                        // Updated disabled check for Sign Up\r\n                        disabled={\r\n                            (resetStage === 1 && !username.trim()) ||\r\n                            (resetStage === 2 && !newPassword.trim()) ||\r\n                            (!isSignUp && resetStage === 0 && (!username.trim() || !password.trim())) ||\r\n                            (isSignUp && isSignUpDisabled) // Use the helper check\r\n                        }\r\n                    >\r\n                        {resetStage === 1 ? 'Verify' : (resetStage === 2 ? 'Change Password' : (isSignUp ? 'Sign Up' : 'Log In'))}\r\n                    </button>\r\n                    \r\n                </form>\r\n                \r\n                {/* Toggle Button (Log In/Sign Up) */}\r\n                {resetStage === 0 && (\r\n                    <button\r\n                        onClick={handleToggleAuth}\r\n                        className=\"toggle-auth-button\"\r\n                    >\r\n                        {isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'}\r\n                    </button>\r\n                )}\r\n                \r\n                {/* Back button for Reset Flow */}\r\n                {resetStage > 0 && (\r\n                    <button onClick={handleBackToLogin} className=\"toggle-auth-button\">\r\n                        Back to Login\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}