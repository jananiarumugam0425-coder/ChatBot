{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Signup\\\\Signup.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SignupView from './SignupView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst Signup = ({\n  onLogin\n}) => {\n  _s();\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n    full_name: '',\n    email: '',\n    phone_number: '',\n    country: ''\n  });\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n\n    // Validate all fields are filled\n    const {\n      username,\n      password,\n      full_name,\n      email,\n      phone_number,\n      country\n    } = formData;\n    if (!username || !password || !full_name || !email || !phone_number || !country) {\n      setError('Please fill in all fields.');\n      return;\n    }\n\n    // Validate password length\n    if (password.length < 6) {\n      setError('Password must be at least 6 characters long.');\n      return;\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      setError('Please enter a valid email address.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      console.log('Sending signup request with data:', {\n        ...formData,\n        password: '***'\n      });\n      const response = await fetch(`${API_BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      console.log('Signup response:', data);\n      if (!response.ok) {\n        throw new Error(data.error || 'Signup failed. Please try again.');\n      }\n\n      // Successful signup - show message and redirect to login\n      setMessage(data.message || 'Signup successful! Please log in.');\n\n      // Clear form\n      setFormData({\n        username: '',\n        password: '',\n        full_name: '',\n        email: '',\n        phone_number: '',\n        country: ''\n      });\n\n      // Redirect to login after successful signup\n      setTimeout(() => {\n        navigate('/login', {\n          state: {\n            message: 'Signup successful! Please log in.'\n          }\n        });\n      }, 2000);\n    } catch (err) {\n      console.error('Signup error:', err);\n      setError(err.message);\n      // Clear password on error\n      setFormData(prev => ({\n        ...prev,\n        password: ''\n      }));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Props to pass to SignupView\n  const viewProps = {\n    formData,\n    error,\n    message,\n    isLoading,\n    handleChange,\n    handleSubmit\n  };\n  return /*#__PURE__*/_jsxDEV(SignupView, {\n    ...viewProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 12\n  }, this);\n};\n_s(Signup, \"VCHpDPYPOH8skfOwjdc3lPC8nk0=\", false, function () {\n  return [useNavigate];\n});\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","useState","useNavigate","SignupView","jsxDEV","_jsxDEV","API_BASE_URL","Signup","onLogin","_s","formData","setFormData","username","password","full_name","email","phone_number","country","error","setError","message","setMessage","isLoading","setIsLoading","navigate","handleChange","e","name","value","target","prevState","handleSubmit","preventDefault","length","emailRegex","test","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","setTimeout","state","err","prev","viewProps","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Signup/Signup.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SignupView from './SignupView';\r\n\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst Signup = ({ onLogin }) => {\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        password: '',\r\n        full_name: '',\r\n        email: '',\r\n        phone_number: '',\r\n        country: ''\r\n    });\r\n    const [error, setError] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        // Validate all fields are filled\r\n        const { username, password, full_name, email, phone_number, country } = formData;\r\n        if (!username || !password || !full_name || !email || !phone_number || !country) {\r\n            setError('Please fill in all fields.');\r\n            return;\r\n        }\r\n\r\n        // Validate password length\r\n        if (password.length < 6) {\r\n            setError('Password must be at least 6 characters long.');\r\n            return;\r\n        }\r\n\r\n        // Validate email format\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(email)) {\r\n            setError('Please enter a valid email address.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            console.log('Sending signup request with data:', { ...formData, password: '***' });\r\n            \r\n            const response = await fetch(`${API_BASE_URL}/signup`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('Signup response:', data);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Signup failed. Please try again.');\r\n            }\r\n\r\n            // Successful signup - show message and redirect to login\r\n            setMessage(data.message || 'Signup successful! Please log in.');\r\n            \r\n            // Clear form\r\n            setFormData({\r\n                username: '',\r\n                password: '',\r\n                full_name: '',\r\n                email: '',\r\n                phone_number: '',\r\n                country: ''\r\n            });\r\n\r\n            // Redirect to login after successful signup\r\n            setTimeout(() => {\r\n                navigate('/login', { \r\n                    state: { message: 'Signup successful! Please log in.' } \r\n                });\r\n            }, 2000);\r\n\r\n        } catch (err) {\r\n            console.error('Signup error:', err);\r\n            setError(err.message);\r\n            // Clear password on error\r\n            setFormData(prev => ({ ...prev, password: '' }));\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Props to pass to SignupView\r\n    const viewProps = {\r\n        formData,\r\n        error,\r\n        message,\r\n        isLoading,\r\n        handleChange,\r\n        handleSubmit\r\n    };\r\n\r\n    return <SignupView {...viewProps} />;\r\n};\r\n\r\nexport default Signup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}