{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Login\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport LoginView from './LoginView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Check for success message from navigation state\n  useEffect(() => {\n    var _location$state;\n    if ((_location$state = location.state) !== null && _location$state !== void 0 && _location$state.message) {\n      setMessage(location.state.message);\n      // Clear the state to prevent showing the message again on refresh\n      window.history.replaceState({}, document.title);\n    }\n  }, [location]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setMessage('');\n    if (!username || !password) {\n      setError('Please enter both username and password.');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Login failed.');\n      }\n\n      // Successful login\n      onLogin(username, data.session_token);\n    } catch (err) {\n      setError(err.message);\n      setPassword(''); // Clear password on error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Pass all data and handlers to the view component\n  const viewProps = {\n    username,\n    password,\n    error,\n    message,\n    isLoading,\n    setUsername,\n    setPassword,\n    handleSubmit\n  };\n  return /*#__PURE__*/_jsxDEV(LoginView, {\n    ...viewProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 12\n  }, this);\n};\n_s(Login, \"rxXFbOjvnl2eUvc7Cid+h6+bQMs=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","LoginView","jsxDEV","_jsxDEV","API_BASE_URL","Login","onLogin","_s","username","setUsername","password","setPassword","error","setError","message","setMessage","isLoading","setIsLoading","navigate","location","_location$state","state","window","history","replaceState","document","title","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","session_token","err","viewProps","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Login/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport LoginView from './LoginView';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst Login = ({ onLogin }) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    // Check for success message from navigation state\r\n    useEffect(() => {\r\n        if (location.state?.message) {\r\n            setMessage(location.state.message);\r\n            // Clear the state to prevent showing the message again on refresh\r\n            window.history.replaceState({}, document.title);\r\n        }\r\n    }, [location]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setMessage('');\r\n\r\n        if (!username || !password) {\r\n            setError('Please enter both username and password.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Login failed.');\r\n            }\r\n\r\n            // Successful login\r\n            onLogin(username, data.session_token);\r\n\r\n        } catch (err) {\r\n            setError(err.message);\r\n            setPassword(''); // Clear password on error\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Pass all data and handlers to the view component\r\n    const viewProps = {\r\n        username,\r\n        password,\r\n        error,\r\n        message,\r\n        isLoading,\r\n        setUsername,\r\n        setPassword,\r\n        handleSubmit\r\n    };\r\n\r\n    return <LoginView {...viewProps} />;\r\n};\r\n\r\nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}