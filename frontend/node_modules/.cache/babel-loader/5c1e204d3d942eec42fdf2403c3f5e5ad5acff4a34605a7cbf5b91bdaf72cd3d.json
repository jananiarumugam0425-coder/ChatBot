{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Login\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  // State for login/signup credentials\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  // State for additional sign-up fields\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n\n  // UI State\n  const [isSignUp, setIsSignUp] = useState(false);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState(''); // Added successMessage state\n\n  // Clears fields when component mounts or authentication mode changes\n  useEffect(() => {\n    setUsername('');\n    setPassword('');\n    setFullName('');\n    setEmail('');\n    setError('');\n    setSuccessMessage('');\n  }, [isSignUp]); // Re-run when switching modes\n\n  const getMessageClass = () => {\n    if (!error) return '';\n    // Check for success message in the error state\n    return error.includes('successful') ? 'login-success' : 'login-error';\n  };\n  const handleAuth = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\n    const body = isSignUp ? JSON.stringify({\n      username,\n      password,\n      full_name: fullName,\n      email\n    }) : JSON.stringify({\n      username,\n      password\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        // Clear password on error for security\n        setPassword('');\n        throw new Error(data.error || 'Authentication failed.');\n      }\n      if (isSignUp) {\n        // Sign-up success\n        setError('Sign-up successful! Please log in now.');\n        setIsSignUp(false);\n      } else if (data.session_token) {\n        // Successful login\n        onLogin(username, data.session_token);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const handleForgotPassword = () => {\n    // Updated placeholder message and timeout for error display\n    setError('Password reset is not enabled for this prototype. Please ensure you are using the correct credentials.');\n    setTimeout(() => {\n      setError('');\n    }, 5000);\n  };\n  const handleToggleAuth = () => {\n    // Clear fields and error when toggling between forms\n    setIsSignUp(!isSignUp);\n  };\n\n  // --- Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"login-title\",\n        children: isSignUp ? 'Sign Up' : 'Log In'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleAuth,\n        className: \"login-form\",\n        autoComplete: \"off\",\n        children: [isSignUp && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Full Name\",\n            className: \"login-input\",\n            value: fullName,\n            onChange: e => setFullName(e.target.value),\n            required: true,\n            autoComplete: \"false\" // Stronger attempt to disable autofill\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"Email\",\n            className: \"login-input\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            required: true,\n            autoComplete: \"false\" // Stronger attempt to disable autofill\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          className: \"login-input\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          required: true,\n          autoComplete: \"false\" // Stronger attempt to disable autofill\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          className: \"login-input\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true,\n          autoComplete: \"new-password\" // Best practice for preventing current password autofill\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), !isSignUp && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleForgotPassword,\n          className: \"forgot-password-button\",\n          children: \"Forgot Password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 26\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: getMessageClass(),\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          disabled: !username.trim() || !password.trim() || isSignUp && (!fullName.trim() || !email.trim()),\n          children: isSignUp ? 'Sign Up' : 'Log In'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleAuth,\n        className: \"toggle-auth-button\",\n        children: isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"UmW9r8msKLadjg4gau4Aa1FibNg=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","Login","onLogin","_s","username","setUsername","password","setPassword","fullName","setFullName","email","setEmail","isSignUp","setIsSignUp","error","setError","successMessage","setSuccessMessage","getMessageClass","includes","handleAuth","e","preventDefault","url","body","JSON","stringify","full_name","response","fetch","method","headers","data","json","ok","Error","session_token","err","message","handleForgotPassword","setTimeout","handleToggleAuth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","autoComplete","type","placeholder","value","onChange","target","required","onClick","disabled","trim","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Login/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Login.css';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst Login = ({ onLogin }) => {\r\n    // State for login/signup credentials\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    // State for additional sign-up fields\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    \r\n    // UI State\r\n    const [isSignUp, setIsSignUp] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState(''); // Added successMessage state\r\n\r\n    // Clears fields when component mounts or authentication mode changes\r\n    useEffect(() => {\r\n        setUsername('');\r\n        setPassword('');\r\n        setFullName('');\r\n        setEmail('');\r\n        setError('');\r\n        setSuccessMessage('');\r\n    }, [isSignUp]); // Re-run when switching modes\r\n\r\n    const getMessageClass = () => {\r\n        if (!error) return '';\r\n        // Check for success message in the error state\r\n        return error.includes('successful') ? 'login-success' : 'login-error';\r\n    }\r\n\r\n    const handleAuth = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n\r\n        const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\r\n\r\n        const body = isSignUp \r\n            ? JSON.stringify({ username, password, full_name: fullName, email }) \r\n            : JSON.stringify({ username, password });\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: body,\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                // Clear password on error for security\r\n                setPassword(''); \r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            if (isSignUp) {\r\n                // Sign-up success\r\n                setError('Sign-up successful! Please log in now.');\r\n                setIsSignUp(false);\r\n            } else if (data.session_token) {\r\n                // Successful login\r\n                onLogin(username, data.session_token);\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    const handleForgotPassword = () => {\r\n        // Updated placeholder message and timeout for error display\r\n        setError('Password reset is not enabled for this prototype. Please ensure you are using the correct credentials.');\r\n        \r\n        setTimeout(() => {\r\n            setError('');\r\n        }, 5000); \r\n    };\r\n\r\n    const handleToggleAuth = () => {\r\n        // Clear fields and error when toggling between forms\r\n        setIsSignUp(!isSignUp);\r\n    }\r\n\r\n    // --- Render ---\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-card\">\r\n                <h2 className=\"login-title\">\r\n                    {isSignUp ? 'Sign Up' : 'Log In'}\r\n                </h2>\r\n                {/* ADDED autoComplete=\"off\" again for robustness */}\r\n                <form onSubmit={handleAuth} className=\"login-form\" autoComplete=\"off\">\r\n                    \r\n                    {/* --- Sign Up Specific Fields --- */}\r\n                    {isSignUp && (\r\n                        <>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Full Name\"\r\n                                className=\"login-input\"\r\n                                value={fullName}\r\n                                onChange={(e) => setFullName(e.target.value)}\r\n                                required\r\n                                autoComplete=\"false\" // Stronger attempt to disable autofill\r\n                            />\r\n                            <input\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                className=\"login-input\"\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                required\r\n                                autoComplete=\"false\" // Stronger attempt to disable autofill\r\n                            />\r\n                        </>\r\n                    )}\r\n\r\n                    {/* --- Common Fields --- */}\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Username\"\r\n                        className=\"login-input\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        required\r\n                        autoComplete=\"false\" // Stronger attempt to disable autofill\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        className=\"login-input\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        required\r\n                        autoComplete=\"new-password\" // Best practice for preventing current password autofill\r\n                    />\r\n                    \r\n                    {/* --- Forgot Password Button --- */}\r\n                    {!isSignUp && (\r\n                         <button type=\"button\" onClick={handleForgotPassword} className=\"forgot-password-button\">\r\n                            Forgot Password?\r\n                         </button>\r\n                    )}\r\n                    \r\n                    {/* Error/Success Message */}\r\n                    {error && <div className={getMessageClass()}>{error}</div>}\r\n                    \r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"login-button\"\r\n                        disabled={!username.trim() || !password.trim() || (isSignUp && (!fullName.trim() || !email.trim()))}\r\n                    >\r\n                        {isSignUp ? 'Sign Up' : 'Log In'}\r\n                    </button>\r\n                    \r\n                </form>\r\n                \r\n                <button\r\n                    onClick={handleToggleAuth}\r\n                    className=\"toggle-auth-button\"\r\n                >\r\n                    {isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC3B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C;EACA,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1D;EACAC,SAAS,CAAC,MAAM;IACZU,WAAW,CAAC,EAAE,CAAC;IACfE,WAAW,CAAC,EAAE,CAAC;IACfE,WAAW,CAAC,EAAE,CAAC;IACfE,QAAQ,CAAC,EAAE,CAAC;IACZI,QAAQ,CAAC,EAAE,CAAC;IACZE,iBAAiB,CAAC,EAAE,CAAC;EACzB,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,MAAMM,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAACJ,KAAK,EAAE,OAAO,EAAE;IACrB;IACA,OAAOA,KAAK,CAACK,QAAQ,CAAC,YAAY,CAAC,GAAG,eAAe,GAAG,aAAa;EACzE,CAAC;EAED,MAAMC,UAAU,GAAG,MAAOC,CAAC,IAAK;IAC5BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBP,QAAQ,CAAC,EAAE,CAAC;IACZE,iBAAiB,CAAC,EAAE,CAAC;IAErB,MAAMM,GAAG,GAAGX,QAAQ,GAAG,GAAGZ,YAAY,SAAS,GAAG,GAAGA,YAAY,QAAQ;IAEzE,MAAMwB,IAAI,GAAGZ,QAAQ,GACfa,IAAI,CAACC,SAAS,CAAC;MAAEtB,QAAQ;MAAEE,QAAQ;MAAEqB,SAAS,EAAEnB,QAAQ;MAAEE;IAAM,CAAC,CAAC,GAClEe,IAAI,CAACC,SAAS,CAAC;MAAEtB,QAAQ;MAAEE;IAAS,CAAC,CAAC;IAE5C,IAAI;MACA,MAAMsB,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAE;QAC9BO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDP,IAAI,EAAEA;MACV,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QACd;QACA3B,WAAW,CAAC,EAAE,CAAC;QACf,MAAM,IAAI4B,KAAK,CAACH,IAAI,CAAClB,KAAK,IAAI,wBAAwB,CAAC;MAC3D;MAEA,IAAIF,QAAQ,EAAE;QACV;QACAG,QAAQ,CAAC,wCAAwC,CAAC;QAClDF,WAAW,CAAC,KAAK,CAAC;MACtB,CAAC,MAAM,IAAImB,IAAI,CAACI,aAAa,EAAE;QAC3B;QACAlC,OAAO,CAACE,QAAQ,EAAE4B,IAAI,CAACI,aAAa,CAAC;MACzC;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVtB,QAAQ,CAACsB,GAAG,CAACC,OAAO,CAAC;IACzB;EACJ,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IAC/B;IACAxB,QAAQ,CAAC,wGAAwG,CAAC;IAElHyB,UAAU,CAAC,MAAM;MACbzB,QAAQ,CAAC,EAAE,CAAC;IAChB,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;EAED,MAAM0B,gBAAgB,GAAGA,CAAA,KAAM;IAC3B;IACA5B,WAAW,CAAC,CAACD,QAAQ,CAAC;EAC1B,CAAC;;EAED;EACA,oBACIf,OAAA;IAAK6C,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC5B9C,OAAA;MAAK6C,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACvB9C,OAAA;QAAI6C,SAAS,EAAC,aAAa;QAAAC,QAAA,EACtB/B,QAAQ,GAAG,SAAS,GAAG;MAAQ;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eAELlD,OAAA;QAAMmD,QAAQ,EAAE5B,UAAW;QAACsB,SAAS,EAAC,YAAY;QAACO,YAAY,EAAC,KAAK;QAAAN,QAAA,GAGhE/B,QAAQ,iBACLf,OAAA,CAAAE,SAAA;UAAA4C,QAAA,gBACI9C,OAAA;YACIqD,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,WAAW;YACvBT,SAAS,EAAC,aAAa;YACvBU,KAAK,EAAE5C,QAAS;YAChB6C,QAAQ,EAAGhC,CAAC,IAAKZ,WAAW,CAACY,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;YAC7CG,QAAQ;YACRN,YAAY,EAAC,OAAO,CAAC;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB,CAAC,eACFlD,OAAA;YACIqD,IAAI,EAAC,OAAO;YACZC,WAAW,EAAC,OAAO;YACnBT,SAAS,EAAC,aAAa;YACvBU,KAAK,EAAE1C,KAAM;YACb2C,QAAQ,EAAGhC,CAAC,IAAKV,QAAQ,CAACU,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;YAC1CG,QAAQ;YACRN,YAAY,EAAC,OAAO,CAAC;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxB,CAAC;QAAA,eACJ,CACL,eAGDlD,OAAA;UACIqD,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,UAAU;UACtBT,SAAS,EAAC,aAAa;UACvBU,KAAK,EAAEhD,QAAS;UAChBiD,QAAQ,EAAGhC,CAAC,IAAKhB,WAAW,CAACgB,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;UAC7CG,QAAQ;UACRN,YAAY,EAAC,OAAO,CAAC;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CAAC,eACFlD,OAAA;UACIqD,IAAI,EAAC,UAAU;UACfC,WAAW,EAAC,UAAU;UACtBT,SAAS,EAAC,aAAa;UACvBU,KAAK,EAAE9C,QAAS;UAChB+C,QAAQ,EAAGhC,CAAC,IAAKd,WAAW,CAACc,CAAC,CAACiC,MAAM,CAACF,KAAK,CAAE;UAC7CG,QAAQ;UACRN,YAAY,EAAC,cAAc,CAAC;QAAA;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,EAGD,CAACnC,QAAQ,iBACLf,OAAA;UAAQqD,IAAI,EAAC,QAAQ;UAACM,OAAO,EAAEjB,oBAAqB;UAACG,SAAS,EAAC,wBAAwB;UAAAC,QAAA,EAAC;QAExF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACZ,EAGAjC,KAAK,iBAAIjB,OAAA;UAAK6C,SAAS,EAAExB,eAAe,CAAC,CAAE;UAAAyB,QAAA,EAAE7B;QAAK;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAE1DlD,OAAA;UACIqD,IAAI,EAAC,QAAQ;UACbR,SAAS,EAAC,cAAc;UACxBe,QAAQ,EAAE,CAACrD,QAAQ,CAACsD,IAAI,CAAC,CAAC,IAAI,CAACpD,QAAQ,CAACoD,IAAI,CAAC,CAAC,IAAK9C,QAAQ,KAAK,CAACJ,QAAQ,CAACkD,IAAI,CAAC,CAAC,IAAI,CAAChD,KAAK,CAACgD,IAAI,CAAC,CAAC,CAAG;UAAAf,QAAA,EAEnG/B,QAAQ,GAAG,SAAS,GAAG;QAAQ;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEP,CAAC,eAEPlD,OAAA;QACI2D,OAAO,EAAEf,gBAAiB;QAC1BC,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAE7B/B,QAAQ,GAAG,iCAAiC,GAAG;MAA0B;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC5C,EAAA,CAvKIF,KAAK;AAAA0D,EAAA,GAAL1D,KAAK;AAyKX,eAAeA,KAAK;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}