{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\ChatPage\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatPage.css';\nimport ChatPageView from './ChatPageView'; // Import the new view component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst ChatPage = ({\n  user,\n  sessionToken,\n  onSignOut\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const chatEndRef = useRef(null);\n\n  // Scroll to the bottom of the chat area when messages change\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Fetch chat history on component mount or whenever the token is set/changes\n  useEffect(() => {\n    if (sessionToken) {\n      fetchChatHistory();\n    }\n  }, [sessionToken]);\n  const fetchChatHistory = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat_history`, {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch history.\");\n      }\n      const data = await response.json();\n      setMessages(data.history || []);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      setError(\"Could not load chat history.\");\n    }\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    const userQuery = input.trim();\n    if (!userQuery || isLoading || !sessionToken) return;\n    setIsLoading(true);\n    setInput('');\n    setError('');\n    const newMessage = {\n      sender: 'user',\n      text: userQuery,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: JSON.stringify({\n          query: userQuery,\n          timestamp: newMessage.timestamp\n        })\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to get response from chatbot.');\n      }\n      const botMessage = {\n        sender: 'bot',\n        text: data.answer,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleFileUpload = async file => {\n    if (isLoading || !sessionToken) return;\n    setIsLoading(true);\n    setError('');\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        headers: {\n          // NOTE: Fetch API automatically sets Content-Type for FormData, \n          // but the Authorization header is manually required.\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: formData\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'File upload failed.');\n      }\n\n      // Add bot confirmation message\n      const botMessage = {\n        sender: 'bot',\n        text: data.message,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Consolidate props for the view component\n  const viewProps = {\n    // State & Refs\n    user,\n    messages,\n    input,\n    setInput,\n    isLoading,\n    error,\n    chatEndRef,\n    onSignOut,\n    // Handlers\n    handleSendMessage,\n    handleFileUpload\n  };\n  return /*#__PURE__*/_jsxDEV(ChatPageView, {\n    ...viewProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"XAHF3kH7F7haVWZr6phcRhnMPo8=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatPageView","jsxDEV","_jsxDEV","API_BASE_URL","ChatPage","user","sessionToken","onSignOut","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","error","setError","chatEndRef","_chatEndRef$current","current","scrollIntoView","behavior","fetchChatHistory","response","fetch","headers","status","ok","Error","data","json","history","console","handleSendMessage","e","preventDefault","userQuery","trim","newMessage","sender","text","timestamp","Date","toISOString","prev","method","body","JSON","stringify","query","botMessage","answer","err","message","handleFileUpload","file","formData","FormData","append","viewProps","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/ChatPage/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatPage.css'; \r\nimport ChatPageView from './ChatPageView'; // Import the new view component\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst ChatPage = ({ user, sessionToken, onSignOut }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const chatEndRef = useRef(null);\r\n\r\n    // Scroll to the bottom of the chat area when messages change\r\n    useEffect(() => {\r\n        chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // Fetch chat history on component mount or whenever the token is set/changes\r\n    useEffect(() => {\r\n        if (sessionToken) {\r\n            fetchChatHistory();\r\n        }\r\n    }, [sessionToken]);\r\n\r\n    const fetchChatHistory = async () => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat_history`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut(); \r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to fetch history.\");\r\n            }\r\n\r\n            const data = await response.json();\r\n            setMessages(data.history || []);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching chat history:\", error);\r\n            setError(\"Could not load chat history.\");\r\n        }\r\n    };\r\n    \r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        const userQuery = input.trim();\r\n        if (!userQuery || isLoading || !sessionToken) return;\r\n\r\n        setIsLoading(true);\r\n        setInput('');\r\n        setError('');\r\n\r\n        const newMessage = { sender: 'user', text: userQuery, timestamp: new Date().toISOString() };\r\n        setMessages(prev => [...prev, newMessage]);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                },\r\n                body: JSON.stringify({ query: userQuery, timestamp: newMessage.timestamp }),\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to get response from chatbot.');\r\n            }\r\n\r\n            const botMessage = { sender: 'bot', text: data.answer, timestamp: new Date().toISOString() };\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleFileUpload = async (file) => {\r\n        if (isLoading || !sessionToken) return;\r\n        setIsLoading(true);\r\n        setError('');\r\n        \r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        \r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/upload`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    // NOTE: Fetch API automatically sets Content-Type for FormData, \r\n                    // but the Authorization header is manually required.\r\n                    'Authorization': `Bearer ${sessionToken}` \r\n                },\r\n                body: formData,\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'File upload failed.');\r\n            }\r\n            \r\n            // Add bot confirmation message\r\n            const botMessage = { sender: 'bot', text: data.message, timestamp: new Date().toISOString() };\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Consolidate props for the view component\r\n    const viewProps = {\r\n        // State & Refs\r\n        user, messages, input, setInput, isLoading, error, chatEndRef, onSignOut,\r\n        \r\n        // Handlers\r\n        handleSendMessage, handleFileUpload,\r\n    };\r\n\r\n\r\n    return (\r\n        <ChatPageView {...viewProps} />\r\n    );\r\n};\r\n\r\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}