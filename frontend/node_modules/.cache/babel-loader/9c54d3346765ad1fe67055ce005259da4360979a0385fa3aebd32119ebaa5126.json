{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Login\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  // State for login/signup credentials\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [newPassword, setNewPassword] = useState(''); // State for password reset\n\n  // State for additional sign-up fields\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n\n  // UI State\n  const [isSignUp, setIsSignUp] = useState(false);\n  // resetStage: 0=Login/SignUp, 1=Verify Username, 2=Change Password\n  const [resetStage, setResetStage] = useState(0);\n  const [error, setError] = useState('');\n\n  // Clears fields when component mounts or authentication mode changes\n  useEffect(() => {\n    setUsername('');\n    setPassword('');\n    setNewPassword('');\n    setEmail('');\n    setFullName('');\n    setError('');\n  }, [isSignUp, resetStage]);\n\n  // Helper function to determine CSS class for messages\n  const getErrorClass = () => {\n    if (!error) return '';\n    // If the error message contains 'successful' or 'Success', apply the green class\n    return error.includes('successful') || error.includes('Success') ? 'login-success' : 'login-error';\n  };\n\n  // --- Primary Authentication Handler (Used for /login and /signup) ---\n  const handleAuth = async e => {\n    e.preventDefault();\n    setError('');\n    const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\n    const body = isSignUp ? JSON.stringify({\n      username,\n      password,\n      full_name: fullName,\n      email\n    }) : JSON.stringify({\n      username,\n      password\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setPassword('');\n        throw new Error(data.error || 'Authentication failed.');\n      }\n      const authToken = data.session_token;\n      if (authToken) {\n        // Successful LOGIN\n        onLogin(authToken, username);\n      } else {\n        // Successful SIGNUP\n        setError(data.message || 'Account created successfully! Please log in.');\n        setIsSignUp(false);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // --- Forgot Password Handlers ---\n\n  const handleOpenResetFlow = () => {\n    setError('');\n    setResetStage(1); // Start reset flow at stage 1\n    setUsername('');\n    setPassword('');\n  };\n\n  // Stage 1 Handler: Verify Username (Calls backend /verify_username)\n  const handleUsernameCheck = async e => {\n    e.preventDefault();\n    setError('');\n    if (!username.trim()) {\n      setError(\"Please enter your username.\");\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/verify_username`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Username verification failed.');\n      }\n\n      // Success: Move to the password change stage\n      setResetStage(2);\n      setError(data.message || `Hello ${username}! Please enter your new password.`);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Stage 2 Handler: Submit New Password (Calls backend /reset_password)\n  const handleChangePassword = async e => {\n    e.preventDefault();\n    setError('');\n    if (!newPassword.trim() || newPassword.length < 6) {\n      setError(\"New password must be at least 6 characters.\");\n      return;\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/reset_password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          new_password: newPassword\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Password reset failed.');\n      }\n\n      // Success\n      setError(data.message || 'Password successfully reset. Please log in.');\n      setResetStage(0); // Return to login form\n      setNewPassword('');\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const handleToggleAuth = () => {\n    setIsSignUp(prev => !prev);\n    setResetStage(0); // Exit reset flow when toggling auth mode\n  };\n  const handleBackToLogin = () => {\n    setResetStage(0);\n  };\n\n  // Determine the action handler based on the current flow stage\n  let formHandler = handleAuth;\n  if (resetStage === 1) {\n    formHandler = handleUsernameCheck;\n  } else if (resetStage === 2) {\n    formHandler = handleChangePassword;\n  }\n\n  // --- Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"login-title\",\n        children: resetStage === 1 ? 'Verify Username' : resetStage === 2 ? 'Set New Password' : isSignUp ? 'Sign Up' : 'Log In'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formHandler,\n        className: \"login-form\",\n        autoComplete: \"off\",\n        children: [isSignUp && resetStage === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Full Name\",\n            className: \"login-input\",\n            value: fullName,\n            onChange: e => setFullName(e.target.value),\n            required: true,\n            autoComplete: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"Email\",\n            className: \"login-input\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            required: true,\n            autoComplete: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true), (resetStage > 0 || !isSignUp) && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          className: \"login-input\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          required: true\n          // Disable if we've already verified the username\n          ,\n          disabled: resetStage === 2,\n          autoComplete: \"username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 26\n        }, this), resetStage === 0 && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          className: \"login-input\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true,\n          autoComplete: isSignUp ? \"new-password\" : \"current-password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), resetStage === 2 && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Enter New Password\",\n          className: \"login-input\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value),\n          required: true,\n          autoComplete: \"new-password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 26\n        }, this), resetStage === 0 && !isSignUp && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleOpenResetFlow,\n          className: \"forgot-password-button\",\n          children: \"Forgot Password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 26\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: getErrorClass(),\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          disabled: resetStage === 1 && !username.trim() || resetStage === 2 && !newPassword.trim() || resetStage === 0 && (!username.trim() || !password.trim() || isSignUp && (!fullName.trim() || !email.trim())),\n          children: resetStage === 1 ? 'Verify' : resetStage === 2 ? 'Change Password' : isSignUp ? 'Sign Up' : 'Log In'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), resetStage === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleAuth,\n        className: \"toggle-auth-button\",\n        children: isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 21\n      }, this), resetStage > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToLogin,\n        className: \"toggle-auth-button\",\n        children: \"\\u2190 Back to Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"uWmmKc5QyUQ6gqZeyWQn3TnPrNc=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","Login","onLogin","_s","username","setUsername","password","setPassword","newPassword","setNewPassword","fullName","setFullName","email","setEmail","isSignUp","setIsSignUp","resetStage","setResetStage","error","setError","getErrorClass","includes","handleAuth","e","preventDefault","url","body","JSON","stringify","full_name","response","fetch","method","headers","data","json","ok","Error","authToken","session_token","message","err","handleOpenResetFlow","handleUsernameCheck","trim","handleChangePassword","length","new_password","handleToggleAuth","prev","handleBackToLogin","formHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","autoComplete","type","placeholder","value","onChange","target","required","disabled","onClick","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Login/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Login.css';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000'; \r\n\r\nconst Login = ({ onLogin }) => {\r\n    // State for login/signup credentials\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [newPassword, setNewPassword] = useState(''); // State for password reset\r\n    \r\n    // State for additional sign-up fields\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    \r\n    // UI State\r\n    const [isSignUp, setIsSignUp] = useState(false);\r\n    // resetStage: 0=Login/SignUp, 1=Verify Username, 2=Change Password\r\n    const [resetStage, setResetStage] = useState(0); \r\n    const [error, setError] = useState('');\r\n\r\n    // Clears fields when component mounts or authentication mode changes\r\n    useEffect(() => {\r\n        setUsername('');\r\n        setPassword('');\r\n        setNewPassword(''); \r\n        setEmail('');\r\n        setFullName('');\r\n        setError('');\r\n    }, [isSignUp, resetStage]); \r\n\r\n    // Helper function to determine CSS class for messages\r\n    const getErrorClass = () => {\r\n        if (!error) return '';\r\n        // If the error message contains 'successful' or 'Success', apply the green class\r\n        return error.includes('successful') || error.includes('Success') ? 'login-success' : 'login-error';\r\n    }\r\n\r\n    // --- Primary Authentication Handler (Used for /login and /signup) ---\r\n    const handleAuth = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        \r\n        const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\r\n\r\n        const body = isSignUp \r\n            ? JSON.stringify({ username, password, full_name: fullName, email }) \r\n            : JSON.stringify({ username, password });\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: body,\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setPassword('');\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            const authToken = data.session_token;\r\n\r\n            if (authToken) {\r\n                // Successful LOGIN\r\n                onLogin(authToken, username);\r\n            } else {\r\n                // Successful SIGNUP\r\n                setError(data.message || 'Account created successfully! Please log in.');\r\n                setIsSignUp(false);\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    \r\n    // --- Forgot Password Handlers ---\r\n\r\n    const handleOpenResetFlow = () => {\r\n        setError('');\r\n        setResetStage(1); // Start reset flow at stage 1\r\n        setUsername(''); \r\n        setPassword('');\r\n    };\r\n\r\n    // Stage 1 Handler: Verify Username (Calls backend /verify_username)\r\n    const handleUsernameCheck = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n\r\n        if (!username.trim()) {\r\n            setError(\"Please enter your username.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/verify_username`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Username verification failed.');\r\n            }\r\n\r\n            // Success: Move to the password change stage\r\n            setResetStage(2); \r\n            setError(data.message || `Hello ${username}! Please enter your new password.`);\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    // Stage 2 Handler: Submit New Password (Calls backend /reset_password)\r\n    const handleChangePassword = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n\r\n        if (!newPassword.trim() || newPassword.length < 6) {\r\n            setError(\"New password must be at least 6 characters.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/reset_password`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ username, new_password: newPassword }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Password reset failed.');\r\n            }\r\n\r\n            // Success\r\n            setError(data.message || 'Password successfully reset. Please log in.');\r\n            setResetStage(0); // Return to login form\r\n            setNewPassword('');\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    const handleToggleAuth = () => {\r\n        setIsSignUp(prev => !prev);\r\n        setResetStage(0); // Exit reset flow when toggling auth mode\r\n    };\r\n    \r\n    const handleBackToLogin = () => {\r\n        setResetStage(0);\r\n    };\r\n    \r\n    // Determine the action handler based on the current flow stage\r\n    let formHandler = handleAuth;\r\n    if (resetStage === 1) {\r\n        formHandler = handleUsernameCheck;\r\n    } else if (resetStage === 2) {\r\n        formHandler = handleChangePassword;\r\n    }\r\n    \r\n    // --- Render ---\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-card\">\r\n                <h2 className=\"login-title\">\r\n                    {resetStage === 1 ? 'Verify Username' : \r\n                     resetStage === 2 ? 'Set New Password' : \r\n                     (isSignUp ? 'Sign Up' : 'Log In')}\r\n                </h2>\r\n\r\n                <form onSubmit={formHandler} className=\"login-form\" autoComplete=\"off\">\r\n                    \r\n                    {/* --- Sign Up Specific Fields --- */}\r\n                    {isSignUp && resetStage === 0 && (\r\n                         <>\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"Full Name\"\r\n                                className=\"login-input\"\r\n                                value={fullName}\r\n                                onChange={(e) => setFullName(e.target.value)}\r\n                                required\r\n                                autoComplete=\"name\" \r\n                            />\r\n                            <input\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                className=\"login-input\"\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                required\r\n                                autoComplete=\"email\"\r\n                            />\r\n                        </>\r\n                    )}\r\n                    \r\n                    {/* --- Username Input --- */}\r\n                    {(resetStage > 0 || !isSignUp) && (\r\n                         <input\r\n                            type=\"text\"\r\n                            placeholder=\"Username\"\r\n                            className=\"login-input\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            required\r\n                            // Disable if we've already verified the username\r\n                            disabled={resetStage === 2} \r\n                            autoComplete=\"username\" \r\n                        />\r\n                    )}\r\n                    \r\n                    {/* --- Password Input (Login/Sign Up) --- */}\r\n                    {resetStage === 0 && (\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            className=\"login-input\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            required\r\n                            autoComplete={isSignUp ? \"new-password\" : \"current-password\"} \r\n                        />\r\n                    )}\r\n\r\n                    {/* --- New Password Input (Reset Stage 2) --- */}\r\n                    {resetStage === 2 && (\r\n                         <input\r\n                            type=\"password\"\r\n                            placeholder=\"Enter New Password\"\r\n                            className=\"login-input\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            required\r\n                            autoComplete=\"new-password\"\r\n                        />\r\n                    )}\r\n                    \r\n                    {/* --- Forgot Password Button --- */}\r\n                    {resetStage === 0 && !isSignUp && (\r\n                         <button type=\"button\" onClick={handleOpenResetFlow} className=\"forgot-password-button\">\r\n                            Forgot Password?\r\n                         </button>\r\n                    )}\r\n                    \r\n                    {/* Error/Success Message */}\r\n                    {error && <div className={getErrorClass()}>{error}</div>}\r\n                    \r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"login-button\"\r\n                        disabled={\r\n                             (resetStage === 1 && !username.trim()) ||\r\n                             (resetStage === 2 && !newPassword.trim()) ||\r\n                             (resetStage === 0 && (!username.trim() || !password.trim() || (isSignUp && (!fullName.trim() || !email.trim()))))\r\n                        }\r\n                    >\r\n                        {resetStage === 1 ? 'Verify' : (resetStage === 2 ? 'Change Password' : (isSignUp ? 'Sign Up' : 'Log In'))}\r\n                    </button>\r\n                    \r\n                </form>\r\n                \r\n                {/* --- Toggle/Back Buttons --- */}\r\n                \r\n                {/* Toggle Button (Log In/Sign Up) */}\r\n                {resetStage === 0 && (\r\n                    <button\r\n                        onClick={handleToggleAuth}\r\n                        className=\"toggle-auth-button\"\r\n                    >\r\n                        {isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'}\r\n                    </button>\r\n                )}\r\n                \r\n                {/* Back button for Reset Flow */}\r\n                {resetStage > 0 && (\r\n                    <button onClick={handleBackToLogin} className=\"toggle-auth-button\">\r\n                        ← Back to Login\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}