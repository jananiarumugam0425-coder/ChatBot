{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\ChatPage\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatPage.css';\nimport ChatInput from '../ChatInput/ChatInput';\nimport UploadButton from '../UploadButton/UploadButton';\nimport ChatMessage from '../ChatMessage/ChatMessage'; // Using your ChatMessage component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = ({\n  user,\n  sessionToken,\n  onSignOut\n}) => {\n  _s();\n  // 1. STATE INITIALIZATION\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const messagesEndRef = useRef(null);\n\n  // Function to scroll to the bottom of the chat\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    // Ensure smooth scrolling to the latest message\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // 2. CHAT HISTORY POLLING AND SCROLL EFFECT\n  useEffect(() => {\n    const fetchChatHistory = async () => {\n      try {\n        const response = await fetch(`http://127.0.0.1:5000/chat_history?session_token=${sessionToken}`);\n        if (!response.ok) {\n          console.error('Failed to fetch chat history. Status:', response.status);\n          return;\n        }\n        const data = await response.json();\n\n        // FIX FOR 'map is undefined': Ensure data.history is a safe array.\n        // The backend returns {\"history\": [...]}, so we ensure the value is an array.\n        setMessages(Array.isArray(data.history) ? data.history : []);\n      } catch (err) {\n        console.error(\"Failed to fetch chat history:\", err);\n      }\n    };\n    fetchChatHistory();\n    // Poll for new messages every 3 seconds\n    const intervalId = setInterval(fetchChatHistory, 3000);\n    return () => clearInterval(intervalId);\n  }, [sessionToken]);\n\n  // Scroll to bottom whenever messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // 3. FILE UPLOAD HANDLER\n  const handleFileUpload = async file => {\n    if (!file) return;\n    setIsLoading(true);\n    setUploadStatus(`Uploading ${file.name}...`);\n\n    // Optimistically add a user message indicating upload started\n    setMessages(prev => [...prev, {\n      sender: 'user',\n      text: `Uploading timesheet file: ${file.name}...`,\n      timestamp: new Date().toISOString()\n    }]);\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('session_token', sessionToken);\n    formData.append('timestamp', new Date().toISOString());\n    try {\n      const response = await fetch('http://127.0.0.1:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'File upload failed.');\n      }\n\n      // Success message will be fetched by the polling mechanism\n      setUploadStatus(`Upload of ${file.name} complete!`);\n    } catch (err) {\n      console.error(\"Upload Error:\", err);\n      setUploadStatus(`Error: ${err.message}`);\n      // Display an error message to the user\n      setMessages(prev => [...prev.slice(0, -1), {\n        sender: 'bot',\n        text: `Sorry, the upload failed: ${err.message}`,\n        timestamp: new Date().toISOString()\n      }]);\n    } finally {\n      setIsLoading(false);\n      setTimeout(() => setUploadStatus(''), 5000); // Clear status after 5 seconds\n    }\n  };\n\n  // 4. SEND MESSAGE HANDLER\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim() || isLoading) return;\n    const userMessage = {\n      sender: 'user',\n      text: input,\n      timestamp: new Date().toISOString()\n    };\n\n    // Optimistically update the UI with the user's message\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query: userMessage.text,\n          session_token: sessionToken\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to get bot response.');\n      }\n      const data = await response.json();\n\n      // Add bot's immediate response to avoid waiting for 3-second poll\n      if (data.answer) {\n        setMessages(prev => [...prev, {\n          sender: 'bot',\n          text: data.answer,\n          timestamp: new Date().toISOString()\n        }]);\n      }\n    } catch (err) {\n      console.error(\"Chat Error:\", err);\n      // Add a bot error message\n      setMessages(prev => [...prev, {\n        sender: 'bot',\n        text: `An error occurred: ${err.message}`,\n        timestamp: new Date().toISOString()\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 5. RENDER LOGIC\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-xl font-bold\",\n          children: \"Timesheet Bot \\uD83E\\uDD16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm text-gray-400\",\n            children: [\"Welcome, \", user, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onSignOut,\n            className: \"sign-out-button\",\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"flex-1 flex flex-col p-4 overflow-y-auto\",\n        children: [uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-2 my-2 text-sm text-center rounded-lg ${uploadStatus.startsWith('Error') ? 'bg-red-500' : 'bg-green-500'}`,\n          children: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages flex-1 flex flex-col space-y-3\",\n          children: [Array.isArray(messages) && messages.map((msg, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n            sender: msg.sender,\n            text: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 border-t border-gray-700 flex items-center space-x-3 bg-gray-800\",\n        children: [/*#__PURE__*/_jsxDEV(UploadButton, {\n          onFileUpload: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n          onChatSubmit: handleSendMessage,\n          isLoading: isLoading,\n          input: input,\n          setInput: setInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"wstlzQjEvwQwehZ244RSP/uflZo=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatInput","UploadButton","ChatMessage","jsxDEV","_jsxDEV","ChatPage","user","sessionToken","onSignOut","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","uploadStatus","setUploadStatus","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchChatHistory","response","fetch","ok","console","error","status","data","json","Array","isArray","history","err","intervalId","setInterval","clearInterval","handleFileUpload","file","name","prev","sender","text","timestamp","Date","toISOString","formData","FormData","append","method","body","errorData","Error","message","slice","setTimeout","handleSendMessage","e","preventDefault","trim","userMessage","headers","JSON","stringify","query","session_token","answer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","startsWith","map","msg","index","ref","onFileUpload","onChatSubmit","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/ChatPage/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatPage.css';\r\nimport ChatInput from '../ChatInput/ChatInput'; \r\nimport UploadButton from '../UploadButton/UploadButton'; \r\nimport ChatMessage from '../ChatMessage/ChatMessage'; // Using your ChatMessage component\r\n\r\nconst ChatPage = ({ user, sessionToken, onSignOut }) => {\r\n    // 1. STATE INITIALIZATION\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [uploadStatus, setUploadStatus] = useState('');\r\n    const messagesEndRef = useRef(null);\r\n\r\n    // Function to scroll to the bottom of the chat\r\n    const scrollToBottom = () => {\r\n        // Ensure smooth scrolling to the latest message\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n    \r\n    // 2. CHAT HISTORY POLLING AND SCROLL EFFECT\r\n    useEffect(() => {\r\n        const fetchChatHistory = async () => {\r\n            try {\r\n                const response = await fetch(`http://127.0.0.1:5000/chat_history?session_token=${sessionToken}`);\r\n                if (!response.ok) {\r\n                    console.error('Failed to fetch chat history. Status:', response.status);\r\n                    return;\r\n                }\r\n                const data = await response.json();\r\n                \r\n                // FIX FOR 'map is undefined': Ensure data.history is a safe array.\r\n                // The backend returns {\"history\": [...]}, so we ensure the value is an array.\r\n                setMessages(Array.isArray(data.history) ? data.history : []);\r\n                \r\n            } catch (err) {\r\n                console.error(\"Failed to fetch chat history:\", err);\r\n            }\r\n        };\r\n\r\n        fetchChatHistory();\r\n        // Poll for new messages every 3 seconds\r\n        const intervalId = setInterval(fetchChatHistory, 3000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, [sessionToken]);\r\n\r\n    // Scroll to bottom whenever messages update\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n\r\n    // 3. FILE UPLOAD HANDLER\r\n    const handleFileUpload = async (file) => {\r\n        if (!file) return;\r\n\r\n        setIsLoading(true);\r\n        setUploadStatus(`Uploading ${file.name}...`);\r\n        \r\n        // Optimistically add a user message indicating upload started\r\n        setMessages(prev => [...prev, {\r\n            sender: 'user',\r\n            text: `Uploading timesheet file: ${file.name}...`,\r\n            timestamp: new Date().toISOString()\r\n        }]);\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        formData.append('session_token', sessionToken);\r\n        formData.append('timestamp', new Date().toISOString());\r\n\r\n        try {\r\n            const response = await fetch('http://127.0.0.1:5000/upload', {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.error || 'File upload failed.');\r\n            }\r\n\r\n            // Success message will be fetched by the polling mechanism\r\n            setUploadStatus(`Upload of ${file.name} complete!`);\r\n\r\n        } catch (err) {\r\n            console.error(\"Upload Error:\", err);\r\n            setUploadStatus(`Error: ${err.message}`);\r\n            // Display an error message to the user\r\n            setMessages(prev => [...prev.slice(0, -1), {\r\n                sender: 'bot',\r\n                text: `Sorry, the upload failed: ${err.message}`,\r\n                timestamp: new Date().toISOString()\r\n            }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n            setTimeout(() => setUploadStatus(''), 5000); // Clear status after 5 seconds\r\n        }\r\n    };\r\n\r\n\r\n    // 4. SEND MESSAGE HANDLER\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        if (!input.trim() || isLoading) return;\r\n\r\n        const userMessage = {\r\n            sender: 'user',\r\n            text: input,\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        // Optimistically update the UI with the user's message\r\n        setMessages(prev => [...prev, userMessage]);\r\n        setInput('');\r\n        setIsLoading(true);\r\n        \r\n        try {\r\n            const response = await fetch('http://127.0.0.1:5000/chat', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ query: userMessage.text, session_token: sessionToken }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.error || 'Failed to get bot response.');\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            // Add bot's immediate response to avoid waiting for 3-second poll\r\n            if (data.answer) {\r\n                 setMessages(prev => [...prev, {\r\n                    sender: 'bot',\r\n                    text: data.answer,\r\n                    timestamp: new Date().toISOString()\r\n                 }]);\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Chat Error:\", err);\r\n            // Add a bot error message\r\n            setMessages(prev => [...prev, {\r\n                sender: 'bot',\r\n                text: `An error occurred: ${err.message}`,\r\n                timestamp: new Date().toISOString()\r\n            }]);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // 5. RENDER LOGIC\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-card\">\r\n                <header className=\"chat-header\">\r\n                    <h1 className=\"text-xl font-bold\">Timesheet Bot 🤖</h1>\r\n                    <div className=\"flex items-center space-x-4\">\r\n                        <span className=\"text-sm text-gray-400\">Welcome, {user}!</span>\r\n                        <button onClick={onSignOut} className=\"sign-out-button\">\r\n                            Sign Out\r\n                        </button>\r\n                    </div>\r\n                </header>\r\n                \r\n                {/* Main Content Area: Ensures chat area takes available height using flex-1 */}\r\n                <main className=\"flex-1 flex flex-col p-4 overflow-y-auto\">\r\n                    \r\n                    {/* Render Upload Status */}\r\n                    {uploadStatus && (\r\n                        <div className={`p-2 my-2 text-sm text-center rounded-lg ${uploadStatus.startsWith('Error') ? 'bg-red-500' : 'bg-green-500'}`}>\r\n                            {uploadStatus}\r\n                        </div>\r\n                    )}\r\n                    \r\n                    {/* Chat Messages Container */}\r\n                    <div className=\"chat-messages flex-1 flex flex-col space-y-3\">\r\n                        {/* FIX: Use ChatMessage component and safely map over the array */}\r\n                        {Array.isArray(messages) && messages.map((msg, index) => (\r\n                            <ChatMessage \r\n                                key={index} \r\n                                sender={msg.sender} \r\n                                text={msg.text} \r\n                            />\r\n                        ))}\r\n                        <div ref={messagesEndRef} />\r\n                    </div>\r\n                </main>\r\n\r\n                {/* Input Area */}\r\n                <div className=\"p-4 border-t border-gray-700 flex items-center space-x-3 bg-gray-800\">\r\n                    <UploadButton onFileUpload={handleFileUpload} />\r\n                    <ChatInput onChatSubmit={handleSendMessage} isLoading={isLoading} input={input} setInput={setInput} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}