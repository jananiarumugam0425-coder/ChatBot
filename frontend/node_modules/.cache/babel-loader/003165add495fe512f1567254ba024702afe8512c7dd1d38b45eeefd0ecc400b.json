{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\ChatPage\\\\ChatPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatPage.css';\nimport ChatPageView from './ChatPageView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst ChatPage = ({\n  user,\n  sessionToken,\n  onSignOut\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [currentChatId, setCurrentChatId] = useState(null);\n  const [chatSessions, setChatSessions] = useState([]);\n  const chatEndRef = useRef(null);\n\n  // Fetch chat sessions on component mount\n  useEffect(() => {\n    if (sessionToken) {\n      fetchChatSessions();\n    }\n  }, [sessionToken]);\n\n  // Create a new chat session when no active session exists\n  useEffect(() => {\n    if (sessionToken && !currentChatId && chatSessions.length === 0) {\n      createNewChatSession();\n    }\n  }, [sessionToken, currentChatId, chatSessions]);\n  const fetchChatSessions = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/sessions`, {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch chat sessions.\");\n      }\n      const data = await response.json();\n      setChatSessions(data.sessions || []);\n    } catch (error) {\n      console.error(\"Error fetching chat sessions:\", error);\n      setError(\"Could not load chat sessions.\");\n    }\n  };\n  const createNewChatSession = async (sessionName = null) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/sessions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: JSON.stringify({\n          session_name: sessionName\n        })\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to create chat session.');\n      }\n      setCurrentChatId(data.chat_id);\n      setMessages([]);\n      await fetchChatSessions(); // Refresh sessions list\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    }\n  };\n  const loadChatSession = async chatId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/sessions/${chatId}`, {\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to load chat session.\");\n      }\n      const data = await response.json();\n      setMessages(data.messages || []);\n      setCurrentChatId(chatId);\n    } catch (error) {\n      console.error(\"Error loading chat session:\", error);\n      setError(\"Could not load chat session.\");\n    }\n  };\n  const deleteChatSession = async chatId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat/sessions/${chatId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        }\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      if (!response.ok) {\n        throw new Error(\"Failed to delete chat session.\");\n      }\n\n      // If we're deleting the current chat, create a new one\n      if (currentChatId === chatId) {\n        await createNewChatSession();\n      }\n      await fetchChatSessions(); // Refresh sessions list\n    } catch (error) {\n      console.error(\"Error deleting chat session:\", error);\n      setError(\"Could not delete chat session.\");\n    }\n  };\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    const userQuery = input.trim();\n    if (!userQuery || isLoading || !sessionToken || !currentChatId) return;\n    setIsLoading(true);\n    setInput('');\n    setError('');\n    const newMessage = {\n      sender: 'user',\n      text: userQuery,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    try {\n      const response = await fetch(`${API_BASE_URL}/chat`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: JSON.stringify({\n          query: userQuery,\n          chat_id: currentChatId,\n          timestamp: newMessage.timestamp\n        })\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to get response from chatbot.');\n      }\n      const botMessage = {\n        sender: 'bot',\n        text: data.answer,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleFileUpload = async file => {\n    if (isLoading || !sessionToken || !currentChatId) return;\n    setIsLoading(true);\n    setError('');\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${sessionToken}`\n        },\n        body: formData\n      });\n      if (response.status === 401) {\n        onSignOut();\n        return;\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'File upload failed.');\n      }\n\n      // Add bot confirmation message\n      const botMessage = {\n        sender: 'bot',\n        text: data.message,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (err) {\n      console.error(err);\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Consolidate props for the view component\n  const viewProps = {\n    user,\n    messages,\n    input,\n    setInput,\n    isLoading,\n    error,\n    chatEndRef,\n    onSignOut,\n    currentChatId,\n    chatSessions,\n    handleSendMessage,\n    handleFileUpload,\n    createNewChatSession,\n    loadChatSession,\n    deleteChatSession\n  };\n  return /*#__PURE__*/_jsxDEV(ChatPageView, {\n    ...viewProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"gjo2CWXKuYx77diS/OxvWCfrBC4=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatPageView","jsxDEV","_jsxDEV","API_BASE_URL","ChatPage","user","sessionToken","onSignOut","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","error","setError","currentChatId","setCurrentChatId","chatSessions","setChatSessions","chatEndRef","fetchChatSessions","length","createNewChatSession","response","fetch","headers","status","ok","Error","data","json","sessions","console","sessionName","method","body","JSON","stringify","session_name","chat_id","err","message","loadChatSession","chatId","deleteChatSession","_chatEndRef$current","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","userQuery","trim","newMessage","sender","text","timestamp","Date","toISOString","prev","query","botMessage","answer","handleFileUpload","file","formData","FormData","append","viewProps","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/ChatPage/ChatPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatPage.css'; \r\nimport ChatPageView from './ChatPageView';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000';\r\n\r\nconst ChatPage = ({ user, sessionToken, onSignOut }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [currentChatId, setCurrentChatId] = useState(null);\r\n    const [chatSessions, setChatSessions] = useState([]);\r\n    const chatEndRef = useRef(null);\r\n\r\n    // Fetch chat sessions on component mount\r\n    useEffect(() => {\r\n        if (sessionToken) {\r\n            fetchChatSessions();\r\n        }\r\n    }, [sessionToken]);\r\n\r\n    // Create a new chat session when no active session exists\r\n    useEffect(() => {\r\n        if (sessionToken && !currentChatId && chatSessions.length === 0) {\r\n            createNewChatSession();\r\n        }\r\n    }, [sessionToken, currentChatId, chatSessions]);\r\n\r\n    const fetchChatSessions = async () => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat/sessions`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut(); \r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to fetch chat sessions.\");\r\n            }\r\n\r\n            const data = await response.json();\r\n            setChatSessions(data.sessions || []);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching chat sessions:\", error);\r\n            setError(\"Could not load chat sessions.\");\r\n        }\r\n    };\r\n\r\n    const createNewChatSession = async (sessionName = null) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat/sessions`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                },\r\n                body: JSON.stringify({ session_name: sessionName })\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to create chat session.');\r\n            }\r\n\r\n            setCurrentChatId(data.chat_id);\r\n            setMessages([]);\r\n            await fetchChatSessions(); // Refresh sessions list\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(err.message);\r\n        }\r\n    };\r\n\r\n    const loadChatSession = async (chatId) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat/sessions/${chatId}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to load chat session.\");\r\n            }\r\n\r\n            const data = await response.json();\r\n            setMessages(data.messages || []);\r\n            setCurrentChatId(chatId);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error loading chat session:\", error);\r\n            setError(\"Could not load chat session.\");\r\n        }\r\n    };\r\n\r\n    const deleteChatSession = async (chatId) => {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat/sessions/${chatId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                }\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Failed to delete chat session.\");\r\n            }\r\n\r\n            // If we're deleting the current chat, create a new one\r\n            if (currentChatId === chatId) {\r\n                await createNewChatSession();\r\n            }\r\n\r\n            await fetchChatSessions(); // Refresh sessions list\r\n\r\n        } catch (error) {\r\n            console.error(\"Error deleting chat session:\", error);\r\n            setError(\"Could not delete chat session.\");\r\n        }\r\n    };\r\n\r\n    // Scroll to bottom when messages change\r\n    useEffect(() => {\r\n        chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n        const userQuery = input.trim();\r\n        if (!userQuery || isLoading || !sessionToken || !currentChatId) return;\r\n\r\n        setIsLoading(true);\r\n        setInput('');\r\n        setError('');\r\n\r\n        const newMessage = { sender: 'user', text: userQuery, timestamp: new Date().toISOString() };\r\n        setMessages(prev => [...prev, newMessage]);\r\n\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/chat`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${sessionToken}`\r\n                },\r\n                body: JSON.stringify({ \r\n                    query: userQuery, \r\n                    chat_id: currentChatId,\r\n                    timestamp: newMessage.timestamp \r\n                }),\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'Failed to get response from chatbot.');\r\n            }\r\n\r\n            const botMessage = { sender: 'bot', text: data.answer, timestamp: new Date().toISOString() };\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleFileUpload = async (file) => {\r\n        if (isLoading || !sessionToken || !currentChatId) return;\r\n        setIsLoading(true);\r\n        setError('');\r\n        \r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        \r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/upload`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authorization': `Bearer ${sessionToken}` \r\n                },\r\n                body: formData,\r\n            });\r\n\r\n            if (response.status === 401) {\r\n                onSignOut();\r\n                return;\r\n            }\r\n            \r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                throw new Error(data.error || 'File upload failed.');\r\n            }\r\n            \r\n            // Add bot confirmation message\r\n            const botMessage = { sender: 'bot', text: data.message, timestamp: new Date().toISOString() };\r\n            setMessages(prev => [...prev, botMessage]);\r\n\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Consolidate props for the view component\r\n    const viewProps = {\r\n        user, messages, input, setInput, isLoading, error, chatEndRef, onSignOut,\r\n        currentChatId, chatSessions,\r\n        handleSendMessage, handleFileUpload,\r\n        createNewChatSession, loadChatSession, deleteChatSession\r\n    };\r\n\r\n    return (\r\n        <ChatPageView {...viewProps} />\r\n    );\r\n};\r\n\r\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}