{"ast":null,"code":"var _jsxFileName = \"E:\\\\Employee Timesheet chatbot\\\\frontend\\\\src\\\\components\\\\Login\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Login.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:5000';\nconst Login = ({\n  onLogin\n}) => {\n  _s();\n  // State for login/signup credentials\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [newPassword, setNewPassword] = useState(''); // NEW state for the new password\n\n  // State for additional sign-up fields\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n\n  // UI State\n  const [isSignUp, setIsSignUp] = useState(false);\n  // isResetFlow now tracks the stage: 0=Login, 1=Enter Username, 2=Change Password\n  const [resetStage, setResetStage] = useState(0);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Clears fields when component mounts or authentication mode changes\n  useEffect(() => {\n    setUsername('');\n    setPassword('');\n    setNewPassword(''); // Clear new password field\n    setEmail('');\n    setFullName('');\n    setError('');\n    setSuccessMessage('');\n  }, [isSignUp, resetStage]); // Re-run when switching modes or reset stages\n\n  // Helper to determine CSS class for messages\n  const getMessageClass = () => {\n    if (error) return 'login-error';\n    if (successMessage) return 'login-success';\n    return '';\n  };\n  const handleAuth = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\n    const body = isSignUp ? JSON.stringify({\n      username,\n      password,\n      full_name: fullName,\n      email\n    }) : JSON.stringify({\n      username,\n      password\n    });\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: body\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setPassword('');\n        throw new Error(data.error || 'Authentication failed.');\n      }\n      if (data.token) {\n        onLogin(data.token, username);\n      } else {\n        setSuccessMessage(data.message || 'Account created successfully! Please log in.');\n        setIsSignUp(false);\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // NEW HANDLER: Moves from Stage 1 (Username) to Stage 2 (Password Change)\n  const handleUsernameCheck = e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    if (!username.trim()) {\n      setError(\"Please enter your username.\");\n      return;\n    }\n\n    // --- Mocked Logic: Check if username exists (In a real app, this is an API call) ---\n    // For the prototype, we assume the username is valid if it's not empty.\n    setResetStage(2); // Move to the password change stage\n    setSuccessMessage(`Change password for ${username}.`);\n    // --- End Mocked Logic ---\n  };\n\n  // NEW HANDLER: Submits the new password\n  const handleChangePassword = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccessMessage('');\n    if (!newPassword.trim() || newPassword.length < 6) {\n      setError(\"New password must be at least 6 characters.\");\n      return;\n    }\n\n    // --- Mocked API Call for Prototype ---\n    // In a real app, this sends the username and new_password to the backend:\n    // await fetch(`${API_BASE_URL}/reset_password`, { method: 'POST', body: JSON.stringify({ username, new_password: newPassword }) });\n\n    setTimeout(() => {\n      setSuccessMessage(`Password for ${username} has been successfully updated!`);\n      setResetStage(0); // Return to login form\n      setNewPassword('');\n    }, 1500);\n\n    // --- End Mocked API Call ---\n  };\n  const handleToggleAuth = () => {\n    setIsSignUp(prev => !prev);\n    setResetStage(0); // Exit reset flow when toggling auth mode\n  };\n  const handleOpenResetFlow = () => {\n    setResetStage(1); // Start reset flow at stage 1\n  };\n  const handleBackToLogin = () => {\n    setResetStage(0);\n  };\n\n  // Determine the action handler based on the flow\n  let formHandler = handleAuth;\n  if (resetStage === 1) {\n    formHandler = handleUsernameCheck;\n  } else if (resetStage === 2) {\n    formHandler = handleChangePassword;\n  }\n\n  // --- Render ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"login-title\",\n        children: resetStage === 1 ? 'Verify Username' : resetStage === 2 ? 'New Password' : isSignUp ? 'Sign Up' : 'Log In'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formHandler,\n        className: \"login-form\",\n        children: [isSignUp && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            className: \"login-input\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Full Name\",\n            value: fullName,\n            onChange: e => setFullName(e.target.value),\n            className: \"login-input\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true), !isSignUp && resetStage < 2 && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Username\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), !isSignUp && resetStage === 0 && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), resetStage === 2 && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Enter New Password\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value),\n          className: \"login-input\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 26\n        }, this), !isSignUp && resetStage === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleOpenResetFlow,\n          className: \"forgot-password-button\",\n          children: \"Forgot Password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 26\n        }, this), (error || successMessage) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: getMessageClass(),\n          children: error || successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"login-button\",\n          disabled: resetStage === 1 && !username.trim() || resetStage === 2 && !newPassword.trim() || !isSignUp && resetStage === 0 && (!username.trim() || !password.trim()) || isSignUp && (!username.trim() || !password.trim() || !fullName.trim() || !email.trim()),\n          children: resetStage === 1 ? 'Verify' : resetStage === 2 ? 'Change Password' : isSignUp ? 'Sign Up' : 'Log In'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), resetStage === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToggleAuth,\n        className: \"toggle-auth-button\",\n        children: isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this), resetStage > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToLogin,\n        className: \"toggle-auth-button\",\n        children: \"Back to Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"yCl/S1IJ67qeTF51n90kv5NzRJE=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","Login","onLogin","_s","username","setUsername","password","setPassword","newPassword","setNewPassword","fullName","setFullName","email","setEmail","isSignUp","setIsSignUp","resetStage","setResetStage","error","setError","successMessage","setSuccessMessage","getMessageClass","handleAuth","e","preventDefault","url","body","JSON","stringify","full_name","response","fetch","method","headers","data","json","ok","Error","token","message","err","handleUsernameCheck","trim","handleChangePassword","length","setTimeout","handleToggleAuth","prev","handleOpenResetFlow","handleBackToLogin","formHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/Employee Timesheet chatbot/frontend/src/components/Login/Login.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Login.css';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:5000'; \r\n\r\nconst Login = ({ onLogin }) => {\r\n    // State for login/signup credentials\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [newPassword, setNewPassword] = useState(''); // NEW state for the new password\r\n    \r\n    // State for additional sign-up fields\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    \r\n    // UI State\r\n    const [isSignUp, setIsSignUp] = useState(false);\r\n    // isResetFlow now tracks the stage: 0=Login, 1=Enter Username, 2=Change Password\r\n    const [resetStage, setResetStage] = useState(0); \r\n    const [error, setError] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n\r\n    // Clears fields when component mounts or authentication mode changes\r\n    useEffect(() => {\r\n        setUsername('');\r\n        setPassword('');\r\n        setNewPassword(''); // Clear new password field\r\n        setEmail('');\r\n        setFullName('');\r\n        setError('');\r\n        setSuccessMessage('');\r\n    }, [isSignUp, resetStage]); // Re-run when switching modes or reset stages\r\n\r\n    // Helper to determine CSS class for messages\r\n    const getMessageClass = () => {\r\n        if (error) return 'login-error';\r\n        if (successMessage) return 'login-success';\r\n        return '';\r\n    };\r\n\r\n    const handleAuth = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n        \r\n        const url = isSignUp ? `${API_BASE_URL}/signup` : `${API_BASE_URL}/login`;\r\n\r\n        const body = isSignUp \r\n            ? JSON.stringify({ username, password, full_name: fullName, email }) \r\n            : JSON.stringify({ username, password });\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: body,\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setPassword('');\r\n                throw new Error(data.error || 'Authentication failed.');\r\n            }\r\n\r\n            if (data.token) {\r\n                onLogin(data.token, username);\r\n            } else {\r\n                setSuccessMessage(data.message || 'Account created successfully! Please log in.');\r\n                setIsSignUp(false);\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    };\r\n    \r\n    // NEW HANDLER: Moves from Stage 1 (Username) to Stage 2 (Password Change)\r\n    const handleUsernameCheck = (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n\r\n        if (!username.trim()) {\r\n            setError(\"Please enter your username.\");\r\n            return;\r\n        }\r\n\r\n        // --- Mocked Logic: Check if username exists (In a real app, this is an API call) ---\r\n        // For the prototype, we assume the username is valid if it's not empty.\r\n        setResetStage(2); // Move to the password change stage\r\n        setSuccessMessage(`Change password for ${username}.`);\r\n        // --- End Mocked Logic ---\r\n    };\r\n\r\n    // NEW HANDLER: Submits the new password\r\n    const handleChangePassword = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccessMessage('');\r\n\r\n        if (!newPassword.trim() || newPassword.length < 6) {\r\n            setError(\"New password must be at least 6 characters.\");\r\n            return;\r\n        }\r\n\r\n        // --- Mocked API Call for Prototype ---\r\n        // In a real app, this sends the username and new_password to the backend:\r\n        // await fetch(`${API_BASE_URL}/reset_password`, { method: 'POST', body: JSON.stringify({ username, new_password: newPassword }) });\r\n\r\n        setTimeout(() => {\r\n            setSuccessMessage(`Password for ${username} has been successfully updated!`);\r\n            setResetStage(0); // Return to login form\r\n            setNewPassword('');\r\n        }, 1500);\r\n        \r\n        // --- End Mocked API Call ---\r\n    };\r\n\r\n    const handleToggleAuth = () => {\r\n        setIsSignUp(prev => !prev);\r\n        setResetStage(0); // Exit reset flow when toggling auth mode\r\n    };\r\n    \r\n    const handleOpenResetFlow = () => {\r\n        setResetStage(1); // Start reset flow at stage 1\r\n    };\r\n\r\n    const handleBackToLogin = () => {\r\n        setResetStage(0);\r\n    };\r\n    \r\n    // Determine the action handler based on the flow\r\n    let formHandler = handleAuth;\r\n    if (resetStage === 1) {\r\n        formHandler = handleUsernameCheck;\r\n    } else if (resetStage === 2) {\r\n        formHandler = handleChangePassword;\r\n    }\r\n    \r\n    // --- Render ---\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-card\">\r\n                <h1 className=\"login-title\">\r\n                    {resetStage === 1 ? 'Verify Username' : (resetStage === 2 ? 'New Password' : (isSignUp ? 'Sign Up' : 'Log In'))}\r\n                </h1>\r\n\r\n                <form onSubmit={formHandler} className=\"login-form\">\r\n                    \r\n                    {/* Show Full Name & Email only for sign up */}\r\n                    {isSignUp && (\r\n                         <>\r\n                            <input\r\n                                type=\"email\"\r\n                                placeholder=\"Email\"\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                className=\"login-input\"\r\n                                required\r\n                            />\r\n                             <input\r\n                                type=\"text\"\r\n                                placeholder=\"Full Name\"\r\n                                value={fullName}\r\n                                onChange={(e) => setFullName(e.target.value)}\r\n                                className=\"login-input\"\r\n                                required\r\n                            />\r\n                        </>\r\n                    )}\r\n                    \r\n                    {/* Username Input - Used in Login and Reset Stage 1 */}\r\n                    {(!isSignUp && resetStage < 2) && (\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Username\"\r\n                            value={username}\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                            className=\"login-input\"\r\n                            required\r\n                        />\r\n                    )}\r\n\r\n                    {/* Password Input - Used in Login/Sign Up */}\r\n                    {(!isSignUp && resetStage === 0) && (\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            className=\"login-input\"\r\n                            required\r\n                        />\r\n                    )}\r\n\r\n                    {/* New Password Input - Used in Reset Stage 2 */}\r\n                    {resetStage === 2 && (\r\n                         <input\r\n                            type=\"password\"\r\n                            placeholder=\"Enter New Password\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            className=\"login-input\"\r\n                            required\r\n                        />\r\n                    )}\r\n                    \r\n                    {/* --- Forgot Password Button (Visible only on Login view) --- */}\r\n                    {(!isSignUp && resetStage === 0) && (\r\n                         <button type=\"button\" onClick={handleOpenResetFlow} className=\"forgot-password-button\">\r\n                            Forgot Password?\r\n                         </button>\r\n                    )}\r\n                    \r\n                    {/* Error/Success Message */}\r\n                    {(error || successMessage) && (\r\n                        <div className={getMessageClass()}>\r\n                            {error || successMessage}\r\n                        </div>\r\n                    )}\r\n                    \r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"login-button\"\r\n                        disabled={\r\n                            (resetStage === 1 && !username.trim()) ||\r\n                            (resetStage === 2 && !newPassword.trim()) ||\r\n                            (!isSignUp && resetStage === 0 && (!username.trim() || !password.trim())) ||\r\n                            (isSignUp && (!username.trim() || !password.trim() || !fullName.trim() || !email.trim()))\r\n                        }\r\n                    >\r\n                        {resetStage === 1 ? 'Verify' : (resetStage === 2 ? 'Change Password' : (isSignUp ? 'Sign Up' : 'Log In'))}\r\n                    </button>\r\n                    \r\n                </form>\r\n                \r\n                {/* Toggle Button (Log In/Sign Up) */}\r\n                {resetStage === 0 && (\r\n                    <button\r\n                        onClick={handleToggleAuth}\r\n                        className=\"toggle-auth-button\"\r\n                    >\r\n                        {isSignUp ? 'Already have an account? Log In' : 'Need an account? Sign Up'}\r\n                    </button>\r\n                )}\r\n                \r\n                {/* Back button for Reset Flow */}\r\n                {resetStage > 0 && (\r\n                    <button onClick={handleBackToLogin} className=\"toggle-auth-button\">\r\n                        Back to Login\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}